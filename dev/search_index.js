var documenterSearchIndex = {"docs":
[{"location":"references/","page":"References","title":"References","text":"CurrentModule = Javis","category":"page"},{"location":"references/#Public-functions","page":"References","title":"Public functions","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Modules = [Javis]\nPrivate = false","category":"page"},{"location":"references/#Javis.Action","page":"References","title":"Javis.Action","text":"Action\n\nDefines what is drawn in a defined frame range.\n\nFields\n\nframes: A range of frames for which the Action is called\nid::Union{Nothing, Symbol}: An id which can be used to save the result of func\nfunc::Function: The drawing function which draws something on the canvas.   It gets called with the arguments video, action, frame\ntransitions::Vector{Transition} a list of transitions   which can be performed before the function gets called.\ninternal_transitions::Vector{InternalTransition}:   Similar to transitions but holds the concrete information whereas Transition can   hold links to other actions which need to be computed first.   See compute_transformation!\nopts::Any can hold any options defined by the user\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Action-Tuple{Any,Function,Vararg{Any,N} where N}","page":"References","title":"Javis.Action","text":"Action(frames, func::Function, args...)\n\nThe most simple form of an action (if there are no args/kwargs) just calls func(video, action, frame) for each of the frames it is defined for. args are defined it the next function definition and can be seen in action     in this example javis\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Action-Tuple{Function,Vararg{Any,N} where N}","page":"References","title":"Javis.Action","text":"Action(func::Function, args...)\n\nSimilar to the above but uses the same as frames as the action above.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Action-Tuple{Rel,Union{Nothing, Symbol},Function,Vararg{Javis.Transition,N} where N}","page":"References","title":"Javis.Action","text":"Action(frames::Rel, id::Union{Nothing,Symbol}, func::Function,\n       transitions::Transition...; kwargs...)\n\nArguments\n\nframes::Rel: defines for which frames this action is by using relative frames.   i.e Rel(10) will be using the 10 frames after the last action.\nid::Symbol: Is used if the func returns something which shall be accessible   by other actions later\nfunc::Function the function that is called after the transitions are performed\ntransitions::Transition... a list of transitions that are performed   before the function func itself is called\n\nThe keywords arguments will be saved inside .opts as a Dict{Symbol, Any}\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Action-Tuple{Symbol,Function,Vararg{Any,N} where N}","page":"References","title":"Javis.Action","text":"Action(frames_or_id::Symbol, func::Function, args...)\n\nThis function decides whether you wrote Action(frames_symbol, ...),     or Action(id_symbol, ...) If the symbol frames_or_id is not a FRAMES_SYMBOL then it is used as an id_symbol.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Action-Tuple{Symbol,Union{Nothing, Symbol},Function,Vararg{Javis.Transition,N} where N}","page":"References","title":"Javis.Action","text":"Action(frames::Symbol, id::Union{Nothing,Symbol}, func::Function,\n       transitions::Transition...; kwargs...)\n\nArguments\n\nframes::Symbol: defines for which frames this action is called by using a symbol.   Currently only :same is supported. This uses the same frames as the action before.\nid::Symbol: Is used if the func returns something which shall be accessible by   other actions later\nfunc::Function the function that is called after the transitions are performed\ntransitions::Transition... a list of transitions that are performed   before the function func itself is called\n\nThe keywords arguments will be saved inside .opts as a Dict{Symbol, Any}\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Action-Tuple{UnitRange,Union{Nothing, Symbol},Function,Vararg{Javis.Transition,N} where N}","page":"References","title":"Javis.Action","text":"Action(frames::UnitRange, id::Union{Nothing,Symbol}, func::Function,\n       transitions::Transition...; kwargs...)\n\nArguments\n\nframes::UnitRange: defines for which frames this action is called\nid::Symbol: Is used if the func returns something which   shall be accessible by other actions later\nfunc::Function the function that is called after the transitions are performed\ntransitions::Transition... a list of transitions that are performed before   the function func itself is called\n\nThe keywords arguments will be saved inside .opts as a Dict{Symbol, Any}\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Line","page":"References","title":"Javis.Line","text":"Line\n\nA type to define a line by two points. Can be used i.e. in projection We mean the mathematic definition of a continuous line and not a segment of a line.\n\nFields\n\np1::Point: start point\np2::Point: second point to define the line\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Rel","page":"References","title":"Javis.Rel","text":"Rel\n\nAbility to define frames in a relative fashion.\n\nExample\n\n Action(1:100, ground; in_global_layer=true),\n Action(1:90, :red_ball, (args...)->circ(p1, \"red\"), Rotation(from_rot, to_rot)),\n Action(Rel(10), :blue_ball, (args...)->circ(p2, \"blue\"), Rotation(2π, from_rot, :red_ball)),\n Action((video, args...)->path!(path_of_red, pos(:red_ball), \"red\"))\n\nis the same as\n\nAction(1:100, ground; in_global_layer=true),\nAction(1:90, :red_ball, (args...)->circ(p1, \"red\"), Rotation(from_rot, to_rot)),\nAction(91:100, :blue_ball, (args...)->circ(p2, \"blue\"), Rotation(2π, from_rot, :red_ball)),\nAction(91:100, (video, args...)->path!(path_of_red, pos(:red_ball), \"red\"))\n\nFields\n\nrel::UnitRange defines the frames in a relative fashion.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Rel-Tuple{Int64}","page":"References","title":"Javis.Rel","text":"Rel(i::Int)\n\nShorthand for Rel(1:i)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Rotation","page":"References","title":"Javis.Rotation","text":"Rotation <: Transition\n\nStores the rotation similar to Translation with from and to but also the rotation point.\n\nFields\n\nfrom::Union{Float64, Symbol}: The start rotation or a link to it\nto::Union{Float64, Symbol}: The end rotation or a link to it\ncenter::Union{Point, Symbol}: The center of the rotation or a link to it.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Rotation-Tuple{Any,Any}","page":"References","title":"Javis.Rotation","text":"Rotation(from, to)\n\nRotation as a transition from from to to (in radians) around the origin.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Rotation-Tuple{Union{Float64, Symbol},Union{Point, Symbol}}","page":"References","title":"Javis.Rotation","text":"Rotation(r::Union{Float64, Symbol}, center::Union{Point, Symbol})\n\nRotation as a transition from 0.0 to r around center. Can be used as a short-hand for rotating around a center point.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Rotation-Tuple{Union{Float64, Symbol}}","page":"References","title":"Javis.Rotation","text":"Rotation(r::Union{Float64, Symbol})\n\nRotation as a transition from 0.0 to r . Can be used as a short-hand.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.SubAction","page":"References","title":"Javis.SubAction","text":"SubAction <: AbstractAction\n\nA SubAction can be used in the keyword arguments of an Action to define small sub actions on the action function, such as appear.\n\nA SubAction should not be created by hand but instead by using one of the constructors.\n\nFields\n\nframes::UnitRange{Int}: the frames relative to the parent Action\nfunc::Function: the function that gets called in each of those frames.   Takes the following arguments: video, action, subaction, rel_frame\ntransitions::Vector{Transition}: A list of transitions like Translation\ninternal_transitions::Vector{InternalTransition}:   A list of internal transitions which store the current transition for a specific frame.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.SubAction-Tuple{UnitRange,Function}","page":"References","title":"Javis.SubAction","text":"SubAction(frames::UnitRange, func::Function)\n\nA SubAction can be defined with frames and a function inside the subactions kwarg of an Action. In the following example a filled circle with radius 50 appears in the first 20 frames, which means the opacity is increased from 0 to 1.0. Then it stays at full opacity and disappears the same way in the last 20 frames.\n\nExample\n\njavis(demo, [     BackgroundAction(1:100, ground),     Action((args...)->circle(O, 50, :fill); subactions = [         SubAction(1:20, appear(:fade)),         SubAction(81:100, disappear(:fade))     ]) ])\n\nArguments\n\nframes::UnitRange: A list of frames for which the function should be called.\nThe frame numbers are relative to the parent Action.\nfunc::Function: The function that gets called for the frames.\nNeeds to have four arguments: video, action, subaction, rel_frame\nFor appear and disappear a closure exists, such that appear(:fade) works.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.SubAction-Tuple{UnitRange,Vararg{Javis.Transition,N} where N}","page":"References","title":"Javis.SubAction","text":"SubAction(frames::UnitRange, trans::Transition...)\n\nA SubAction can also be defined this way with having a list of transitions. This is similar to defining transitions inside Action\n\nIn the following example a circle is faded in during the first 25 frames then moves to\n\nPoint(100, 20) then to Point(120, -20) (the translations are added)\nand then back to the origin\n\nIn the last 25 frames it disappears from the world.\n\nExample\n\njavis(demo, [\n        BackgroundAction(1:200, ground_opacity),\n        Action((args...)->circle(O, 50, :fill); subactions = [\n            SubAction(1:25, appear(:fade)),\n            SubAction(26:75, Translation(Point(100, 20))),\n            SubAction(76:100, Translation(Point(20, -40))),\n            SubAction(101:175, Translation(Point(-120, 20))),\n            SubAction(176:200, disappear(:fade))\n        ]),\n    ], tempdirectory=\"current/images\", pathname=\"current/circle_square.gif\")\n\nArguments\n\nframes::UnitRange: A list of frames for which the function should be called.\nThe frame numbers are relative to the parent Action.\ntrans::Transition...: A list of transitions that shall be performed.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Transformation","page":"References","title":"Javis.Transformation","text":"Transformation\n\nDefines a transformation which can be returned by an action to be accessible later. See the circ function inside the javis as an example.\n\nIt can be accessed by another [Action])(@ref) using the symbol notation like :red_ball in the example.\n\nFields\n\np::Point: the translation part of the transformation\nangle::Float64: the angle component of the transformation (in radians)\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Translation","page":"References","title":"Javis.Translation","text":"Translation <: Transition\n\nStores the Point or a link for the start and end position of the translation\n\nFields\n\nfrom::Union{Point, Symbol}: The start position or a link to the start position.     See :red_ball in javis to::Union{Point, Symbol}: The end position or a link to the end position\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Translation-Tuple{Real,Real}","page":"References","title":"Javis.Translation","text":"Translation(x::Real, y::Real)\n\nCreate a Translation(O, Point(x,y)) such that a translation is done from the origin. Shorthand for writing Translation(Point(x,y)).\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Translation-Tuple{Union{Point, Symbol}}","page":"References","title":"Javis.Translation","text":"Translation(p::Union{Point, Symbol})\n\nCreate a Translation(O, p) such that a translation is done from the origin.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Video","page":"References","title":"Javis.Video","text":"Video\n\nDefines the video canvas for an animation.\n\nFields\n\nwidth::Int the width in pixel\nheight::Int the height in pixel\ndefs::Dict{Symbol, Any} Some definitions which should be accessible throughout the video.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Video-Tuple{Any,Any}","page":"References","title":"Javis.Video","text":"Video(width, height)\n\nCreate a video with a certain width and height in pixel. This also sets CURRENT_VIDEO.\n\n\n\n\n\n","category":"method"},{"location":"references/#Base.:*-Tuple{Array{Float64,2},Transformation}","page":"References","title":"Base.:*","text":"Base.:*(m::Array{Float64,2}, transformation::Transformation)\n\nConvert the transformation to a matrix and multiplies m*trans_matrix. Return a new Transformation\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.BackgroundAction-Tuple{Any,Function,Vararg{Any,N} where N}","page":"References","title":"Javis.BackgroundAction","text":"BackgroundAction(frames, func::Function, args...; kwargs...)\n\nCreate an Action where in_global_layer is set to true such that i.e the specified color in the background is applied globally (basically a new default)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.BackgroundAction-Tuple{Any,Symbol,Function,Vararg{Any,N} where N}","page":"References","title":"Javis.BackgroundAction","text":"BackgroundAction(frames, id::Symbol, func::Function, args...; kwargs...)\n\nCreate an Action where in_global_layer is set to true and saves the return into id.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.ang-Tuple{Any}","page":"References","title":"Javis.ang","text":"ang(x)\n\nang is just a short-hand for get_angle\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.appear-Tuple{Symbol}","page":"References","title":"Javis.appear","text":"appear(s::Symbol)\n\nAppear can be used inside a SubAction\n\nExample\n\nAction(101:200, (args...)->house_of_nicholas(); subactions = [\n    SubAction(1:20, appear(:fade)),\n    SubAction(81:100, disappear(:fade))\n])\n\nIn this case the house_of_nicholas will fade in during the first 20 frames of the Action so 101-120.\n\nArguments\n\ns::Symbol: the symbol defines the animation of appearance   The only symbols that are currently supported are:\n:fade_line_width which increases the line width up to the default value  or the value specified by setline\n:fade which increases the opcacity up to the default value  or the value specified by setopacity\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.disappear-Tuple{Symbol}","page":"References","title":"Javis.disappear","text":"disappear(s::Symbol)\n\nDisappear can be used inside a SubAction\n\nExample\n\nAction(101:200, (args...)->house_of_nicholas(); subactions = [\n    SubAction(1:20, appear(:fade)),\n    SubAction(81:100, disappear(:fade))\n])\n\nIn this case the house_of_nicholas will fade out during the last 20 frames of the Action so 181-200.\n\nArguments\n\ns::Symbol: the symbol defines the animation of disappearance   The only symbols that are currently supported are:\n:fade_line_width which descreases the line width up to the default value   or the value specified by setline\n:fade which decreases the opcacity up to the default value   or the value specified by setopacity\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_grid-Tuple{}","page":"References","title":"Javis.draw_grid","text":"draw_grid(video::Video, action::Action, frame::Int; direction::AbstractString = \"TR\", line_gap = 25)\n\nDraws an oriented grid on the given frame of a Video.\n\nArguments\n\ndirection::AbstractString: Where grid animation finishes. Default: \"TR\" Available Orientations:\n\"TR\" - Animation finishes in the Top Right corner of the frame.\n\"TL\" - Animation finishes in the Top Left corner of the frame.\n\"BR\" - Animation finishes in the Bottom Right corner of the frame.\n\"BL\" - Animation finishes in the Bottom Left corner of the frame.\nline_gap: How many pixels between each line. Default: 25\n\nExample\n\nExample call of this function within an Action.\n\n...\n Action(1:100, :line, draw_grid(direction = \"TL\", line_gap = 25))\n...\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_angle-Tuple{Symbol}","page":"References","title":"Javis.get_angle","text":"get_angle(s::Symbol)\n\nGet access to the angle that got saved in s by a previous action.\n\nReturns\n\nFloat64: the angle stored by a previous action i.e via return Transformation(p, angle)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_position-Tuple{Symbol}","page":"References","title":"Javis.get_position","text":"get_position(s::Symbol)\n\nGet access to the position that got saved in s by a previous action.\n\nReturns\n\nPoint: the point stored by a previous action.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_value-Tuple{Symbol}","page":"References","title":"Javis.get_value","text":"get_value(s::Symbol)\n\nGet access to the value that got saved in s by a previous action. If you want to access a position or angle check out get_position and get_angle.\n\nReturns\n\nAny: the value stored by a previous action.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.javis-Union{Tuple{AT}, Tuple{Video,Array{AT,1}}} where AT<:Javis.AbstractAction","page":"References","title":"Javis.javis","text":"javis(\n    video::Video,\n    actions::Vector{AbstractAction};\n    creategif=false,\n    framerate=30,\n    pathname=\"\",\n    tempdirectory=\"\",\n    usenewffmpeg=true\n)\n\nSimilar to animate in Luxor with a slightly different structure. Instead of using actions and a video instead of scenes in a movie.\n\nArguments\n\nvideo::Video: The video which defines the dimensions of the output\nactions::Vector{Action}: All actions that are performed\n\nKeywords\n\nframerate::Int: The frame rate of the video\npathname::String: The path for the gif if creategif = true\ntempdirectory::String: The folder where each frame is stored\n\nExample\n\nfunction ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction circ(p=O, color=\"black\")\n    sethue(color)\n    circle(p, 25, :fill)\n    return Transformation(p, 0.0)\nend\n\nfrom = Point(-200, -200)\nto = Point(-20, -130)\np1 = Point(0,-100)\np2 = Point(0,-50)\nfrom_rot = 0.0\nto_rot = 2π\n\ndemo = Video(500, 500)\njavis(demo, [\n    Action(1:100, ground),\n    Action(1:100, :red_ball, (args...)->circ(p1, \"red\"), Rotation(from_rot, to_rot)),\n    Action(1:100, (args...)->circ(p2, \"blue\"), Rotation(to_rot, from_rot, :red_ball))\n], tempdirectory=\"images\", creategif=true, pathname=\"rotating.gif\")\n\nThis structure makes it possible to refer to positions of previous actions i.e :red_ball is an id for the position or the red ball which can be used in the rotation of the next ball.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.latex-Tuple{LaTeXStrings.LaTeXString,Real,Symbol}","page":"References","title":"Javis.latex","text":"latex(text::LaTeXString, font_size::Real, action::Symbol)\n\nAdd the latex string text to the top left corner of the LaTeX path. Can be added to Luxor.jl graphics such as Video or Drawing.\n\nNOTE: This only works if tex2svg is installed. It can be installed using the following command     (you may have to prefix this command with sudo depending on your installation):\n\nnpm install -g mathjax-node-cli\n\nArguments\n\ntext::LaTeXString: a LaTeX string to render.\nfont_size::Real: font size of LaTeX string. Default 10.\naction::Symbol: graphics actions defined by Luxor.jl. Default :stroke.\n\nAvailable actions:\n\n:stroke -  Draws the latex string on the canvas. For more info check Luxor.strokepath\n:path - Creates the path of the latex string but does not render it to the canvas.\n\nThrows\n\nIOError: mathjax-node-cli is not installed\n\nExample\n\nusing Javis\nusing LaTeXStrings\n\nmy_drawing = Drawing(400, 200, \"test.png\")\nbackground(\"white\")\nsethue(\"black\")\nlatex(L\"\\sum \\phi\", 100)\nfinish()\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.morph-Tuple{Function,Function}","page":"References","title":"Javis.morph","text":"morph(from_func::Function, to_func::Function)\n\nA closure for the _morph function. This makes it easier to write the function inside an Action.\n\nCurrently morphing is quite simple and only works for basic shapes. It especially does not work with functions which produce more than one polygon or which produce filled polygons. Blending between fills of polygons is definitely coming at a later stage.\n\nImportant: The functions itself should not draw the polygon i.e. use circle(Point(100,100), 50) instead of circle(Point(100,100), 50, :stroke)\n\nArguments\n\nfrom_func::Function: The function that creates the path for the first polygon.\nto_func::Function: Same as from_func but it defines the \"result\" polygon,                      which will be displayed at the end of the Action\n\nExample\n\nThis creates a star that morphs into a circle and back.\n\nusing Javis\n\nastar(args...) = star(O, 50)\nacirc(args...) = circle(Point(100,100), 50)\n\nvideo = Video(500, 500)\njavis(video, [\n    Action(1:100, ground),\n    Action(1:50, morph(astar, acirc)),\n    Action(51:100, morph(acirc, astar))\n], creategif=true, tempdirectory=\"images\",\n    pathname=\"star2circle.gif\", deletetemp=true)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.pos-Tuple{Any}","page":"References","title":"Javis.pos","text":"pos(x)\n\npos is just a short-hand for get_position\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.projection-Tuple{Point,Line}","page":"References","title":"Javis.projection","text":"projection(p::Point, l::Line)\n\nReturn the projection of a point to a line.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.setline-Tuple{Any}","page":"References","title":"Javis.setline","text":"setline(linewidth)\n\nSet the line width and multiply it with the current multiplier which is i.e. set by appear and disappear.\n\nNormal behavior without any animation is the same as Luxor.setline.\n\nExample\n\nsetline(10)\nline(O, Point(10, 10))\n\nArguments:\n\nlinewidth: the line width in pixel\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.setopacity-Tuple{Any}","page":"References","title":"Javis.setopacity","text":"setopacity(linewidth)\n\nSet the opacity and multiply it with the current multiplier which is i.e. set by appear and disappear.\n\nNormal behavior without any animation is the same as Luxor.setopacity.\n\nExample\n\nsetopacity(0.5)\ncircle(O, 20, :fill)\n\nArguments:\n\nopacity: the opacity between 0.0 and 1.0\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.val-Tuple{Any}","page":"References","title":"Javis.val","text":"val(x)\n\nval is just a short-hand for get_value\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.zero_lines-Tuple{}","page":"References","title":"Javis.zero_lines","text":"zero_lines(video::Video, action::Action, frame::Int; direction::AbstractString = \"TR\",             line_thickness = 10)\n\nDraws zero lines on the given frame of a Video.\n\nArguments\n\ndirection::AbstractString: Direction for how vertical and horizontal axes are drawn.\n\nDefault: \"TR\" Available Orientations:\n\n\"TR\" - Vertical axis drawn towards the Top and horizontal axis drawn to the Right of the frame.\n\"TL\" - Vertical axis drawn towards the Top and horizontal axis drawn to the Left of the frame.\n\"BR\" - Vertical axis drawn towards the Bottom and horizontal axis drawn to the Right of the frame.\n\"BL\" - Vertical axis drawn towards the Bottom and horizontal axis drawn to the Left of the frame.\nline_thickness: Defines the thickness of the zero lines. Default: 10\n\nExample\n\nThis example will produce an animation with the vertical axis being drawn towards the top and the horizontal axis being drawn towards the left. One will need to define their own path for tempdirectory and pathname.\n\n...\n Action(1:100, :line, zero_lines(direction = \"TL\", line_thickness = 10)),\n...\n\n\n\n\n\n","category":"method"},{"location":"references/#Private-functions","page":"References","title":"Private functions","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Modules = [Javis]\nPublic = false","category":"page"},{"location":"references/#Javis.CURRENT_ACTION","page":"References","title":"Javis.CURRENT_ACTION","text":"CURRENT_ACTION\n\nholds the current action in an array to be declared as a constant The current action can be accessed using CURRENT_ACTION[1]\n\n\n\n\n\n","category":"constant"},{"location":"references/#Javis.CURRENT_VIDEO","page":"References","title":"Javis.CURRENT_VIDEO","text":"CURRENT_VIDEO\n\nholds the current video in an array to be declared as a constant The current video can be accessed using CURRENT_VIDEO[1]\n\n\n\n\n\n","category":"constant"},{"location":"references/#Javis.ActionSetting","page":"References","title":"Javis.ActionSetting","text":"ActionSetting\n\nThe current settings of an Action which are saved in action.current_setting.\n\nFields\n\nline_width::Float64: the current line width\nmul_line_width::Float64: the current multiplier for line width.   The actual line width is then: mul_line_width * line_width\nopacity::Float64: the current opacity\nmul_opacity::Float64: the current multiplier for opacity.   The actual opacity is then: mul_opacity * opacity\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis._morph-Tuple{Video,Action,Any,Function,Function}","page":"References","title":"Javis._morph","text":"_morph(video::Video, action::Action, frame, from_func::Function, to_func::Function)\n\nInternal version of morph but described there.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.compute_transformation!-Tuple{Javis.AbstractAction,Video,Int64}","page":"References","title":"Javis.compute_transformation!","text":"compute_transformation!(action::AbstractAction, video::Video, frame::Int)\n\nUpdate action.internal_transitions for the current frame number\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.compute_transition!-Tuple{Javis.InternalRotation,Rotation,Any,Javis.AbstractAction,Any}","page":"References","title":"Javis.compute_transition!","text":"compute_transition!(internal_rotation::InternalRotation, rotation::Rotation, video,\n                    action::AbstractAction, frame)\n\nComputes the rotation transformation for the action. If the Rotation is given directly it uses the frame number for interpolation. If rotation includes symbols the current definition of that look up is used for computation.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.compute_transition!-Tuple{Javis.InternalTranslation,Translation,Any,Javis.AbstractAction,Any}","page":"References","title":"Javis.compute_transition!","text":"compute_transition!(internal_translation::InternalTranslation, translation::Translation,\n                    video, action::AbstractAction, frame)\n\nComputes the translation transformation for the action. If the translation is given directly it uses the frame number for interpolation. If translation includes symbols the current definition of that symbol is looked up and used for computation.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.create_internal_transitions!-Tuple{Javis.AbstractAction}","page":"References","title":"Javis.create_internal_transitions!","text":"create_internal_transitions!(action::AbstractAction)\n\nFor every translation an internal translation is added to action.internal_transitions. Same is true for all other transitions.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_obj-Tuple{Val{:g},Any,Any}","page":"References","title":"Javis.draw_obj","text":"draw_obj(::Val{:g}, o, defs)\n\nDraws a group by setting the attributes (like transformations) and then calls draw_obj for all child elements.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_obj-Tuple{Val{:path},Any,Any}","page":"References","title":"Javis.draw_obj","text":"draw_obj(::Val{:path}, o, defs)\n\nCalls the commands specified in the path data. Currently supports only a subset of possible SVG commands.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_obj-Tuple{Val{:rect},Any,Any}","page":"References","title":"Javis.draw_obj","text":"draw_obj(::Val{:rect}, o, defs)\n\nDraw the rectangle defined by the object o.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_obj-Tuple{Val{:use},Any,Any}","page":"References","title":"Javis.draw_obj","text":"draw_obj(::Val{:use}, o, defs)\n\nCalls the command specified in defs.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.float_attribute-Tuple{LightXML.XMLElement,Any}","page":"References","title":"Javis.float_attribute","text":"float_attribute(o, name)\n\nGet the attribute name of the XMLElement and parse it as a Float64\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.match_num_point!-Tuple{Array{Point,1},Array{Point,1}}","page":"References","title":"Javis.match_num_point!","text":"match_num_point!(poly_1::Vector{Point}, poly_2::Vector{Point})\n\nThis is a helper function for morph. Given two polygons poly_1 and poly_2 points are added to the polygon with less points until both polygons have the same number of points. The polygon with less points gets mutated during this process.\n\nArguments\n\npoly_1::Vector{Point}: The points which define the first polygon\npoly_2::Vector{Point}: The points which define the second polygon\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.path_move-Tuple{Any,Any}","page":"References","title":"Javis.path_move","text":"path_move(x,y)\n\nMoving to the specified point\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.path_quadratic-Tuple{Point,Any,Any,Any,Any}","page":"References","title":"Javis.path_quadratic","text":"path_quadratic(c_pt::Point, x,y, xe, ye)\n\nDrawing a quadratic bezier curve by computing a cubic one as that is supported by Luxor\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.pathsvg","page":"References","title":"Javis.pathsvg","text":"pathsvg(svg, fontsize=10)\n\nConvert an svg to a path using Luxor. Normally called via the latex command. It handles only a subset of the full power of svg.\n\n\n\n\n\n","category":"function"},{"location":"references/#Javis.perform_action-NTuple{4,Any}","page":"References","title":"Javis.perform_action","text":"perform_action(action, video, frame, origin_matrix)\n\nIs called inside the javis and does everything handled for an AbstractAction. It is a 4-step process:\n\ncompute the transformation for this action (translation, rotation, scale)\ndo the transformation\ncall the action function\nsave the result of the action if wanted inside video.defs\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.perform_transformation-Tuple{Javis.AbstractAction}","page":"References","title":"Javis.perform_transformation","text":"perform_transformation(action::AbstractAction)\n\nPerform the transformations as described in action.internal_transitions\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.perform_transformation-Tuple{Javis.InternalRotation}","page":"References","title":"Javis.perform_transformation","text":"perform_transformation(trans::InternalRotation)\n\nTranslate and rotate as described in trans.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.perform_transformation-Tuple{Javis.InternalTranslation}","page":"References","title":"Javis.perform_transformation","text":"perform_transformation(trans::InternalTranslation)\n\nTranslate as described in trans.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.save_morph_polygons!-Tuple{Action,Function,Function}","page":"References","title":"Javis.save_morph_polygons!","text":"save_morph_polygons!(action::Action, from_func::Function, to_func::Function)\n\nConverts the paths created by the functions to polygons and calls match_num_point! such that both polygons have the same number of points. This is done once inside _morph. Saves the two polygons inside action.opts[:from_poly] and action.opts[:to_poly].\n\nAssumption: Both functions create only a single polygon each.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_action_defaults!-Tuple{Any}","page":"References","title":"Javis.set_action_defaults!","text":"set_action_defaults!(action)\n\nSet the default action values\n\nline_width and calls Luxor.setline.\nopacity and calls Luxor.opacity.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_attr-Tuple{Val{:transform},Any}","page":"References","title":"Javis.set_attr","text":"set_attr(::Val{:transform}, transform_str)\n\nCall the corresponding set_transform method i.e matrix, scale and translate\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_attrs-Tuple{Any}","page":"References","title":"Javis.set_attrs","text":"set_attrs(o)\n\nSetting the attributes of the object o by calling set_attr methods.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_transform-Tuple{Val{:matrix},Vararg{Any,N} where N}","page":"References","title":"Javis.set_transform","text":"set_transform(::Val{:matrix}, args...)\n\nMultiply the new matrix with the current matrix and set it.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.update_ActionSetting!-Tuple{Javis.ActionSetting,Javis.ActionSetting}","page":"References","title":"Javis.update_ActionSetting!","text":"update_ActionSetting!(as::ActionSetting, by::ActionSetting)\n\nSet the fields of as to the same as by. Basically copying them over.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/tutorial_3/#**Tutorial-3:**-Rendering-LaTeX-with-Javis!","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"","category":"section"},{"location":"contributing/#Contributing-to-Javis","page":"Contributing","title":"Contributing to Javis","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Javis is currently under heavy development as we push to a primary release version. As such, some parts of these instructions may become outdated faster than we can update them. If you encounter an error in these instructions, please open an issue and let us know. ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"We follow a workflow pattern that is directly inspired by the development workflow guide found in Plots.jl. The general workflow we expect contributors to follow is as follows:","category":"page"},{"location":"contributing/#.-Fork-the-repo-to-your-account","page":"Contributing","title":"1. Fork the repo to your account","text":"","category":"section"},{"location":"contributing/#.-Create-a-branch-based-on-what-you-are-developing","page":"Contributing","title":"2. Create a branch based on what you are developing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Before making a branch, make sure to check that you are even with master via the following commands:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"git fetch origin\ngit checkout master\ngit merge --ff-only origin/master","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The --ff-only flag will \"fast forward\" to newer commits. It will not create new merge commits.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"After your master branch is up to date, we follow the following naming conventions for branches:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"For issue fixes, name it like so:\ngit branch [your github username]-issue-[issue number]\n\nExample: tcp-issue-6\nFor features, name it like so:\ngit branch [your github username]-feature-[issue number]\n\nExample: tcp-feature-4\nFor documentation, name it like so:\ngit branch [your github username]-documentation\n\nExample: tcp-documentation","category":"page"},{"location":"contributing/#.-Write-code-and-commit","page":"Contributing","title":"3. Write code and commit","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"After making the changes you wanted to make, now let's push these changes to GitHub. The way we do this is in three steps:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Add the files you have added or changed via git add \nAfter adding the files, we need to say what you did to the files (i.e. commit the files). This can be accomplished thusly: git commit -m \"your message\" \nFinally, let's push these changes to GitHub using git push --set-upstream origin [name of the branch you made]","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"An example would be this: Say if I make a branch called thecedarprince-documentation and changed README.md. In that file, all I added was how cool I think penguins are. I would do the following:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"git add README.md\ngit commit -m \"Added discussion about penguins\"\ngit push --set-upstream origin thecedarprince-documentation","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If I have already pushed in the past and set the upstream to origin, then I could do git push instead of git push --set-upstream origin thecedarprince-documentation.","category":"page"},{"location":"contributing/#.-Submitting-your-changes-to-the-main-project","page":"Contributing","title":"4. Submitting your changes to the main project","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Almost done! Go to your fork and there should be a section that asks you to make a pull request (PR) from your branch. This allows the maintainers of Javis to see if they can add your changes to the main project. If not, you can click the \"New pull request\" button.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Make sure the \"base\" branch is Javis master and the \"compare\" branch is the branch you just made. To your PR, add an informative title and description, and link your PR to relevant issues or discussions. Finally, click \"Create pull request\". ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"You may get some questions about it, and possibly suggestions of how to make it ready to go into the main project. Then, if all goes according to plan, it gets merged... Thanks for the contribution!! :tada: :tada: :tada:","category":"page"},{"location":"tutorials/tutorial_2/#**Tutorial-2:**-What-Are-Actions?","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"In this tutorial, we are going to learn how to make a brain! 🧠  Well, not exactly making a brain.  Instead, we are going to animate brain activity by simulating a 10-20 EEG Electrode Array using random data.  This Project Tutorial builds on prior tutorials and serves as a cumulative test of your understanding about Javis.","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"When you are done with this tutorial, you will have created the following animation:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/#Learning-Outcomes","page":"Tutorial 2: What Are Actions?","title":"Learning Outcomes","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"From this project tutorial you will:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Clearly understand how to use Actions to create an animation\nBe able to create more complex animations\nDisplay meaningful information on your animations","category":"page"},{"location":"tutorials/tutorial_2/#Setting-Up-Our-Animation","page":"Tutorial 2: What Are Actions?","title":"Setting Up Our Animation","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"As demonstrated in prior tutorials, we will use Javis to create a Video object:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"using Javis\n\nvideo = Video(500, 500)","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Let's define our background function to create the backdrop of our frames:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"function ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"If we were to execute the javis command now, this is what would appear as an output of the following execution:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"video = Video(500, 500)\njavis(video, [BackgroundAction(1:30, ground)], pathname = \"eeg.gif\", framerate = 1)","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"As you can see, we have generated a blank gif. Not exactly what we want but it is a start! We used a special type of action called BackgroundAction. This applies whatever function that is provided to it as the default background of any future animations produced by a future action.","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"NOTE: For this animation, we will be using a framerate of 1 frame per second. Thus, why framerate is set to the value of 1 in javis.","category":"page"},{"location":"tutorials/tutorial_2/#Getting-A-*head*","page":"Tutorial 2: What Are Actions?","title":"Getting A - head","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Now that we have created our default background via the BackgroundAction, let's move onto making the head that we will attach our electrodes to!","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"First, we define an additional function that allows us to draw a circle. This will be used extensively later:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"function circ(p = O, color = \"black\", action = :fill, radius = 25, edge = \"solid\")\n    sethue(color)\n    setdash(edge)\n    circle(p, radius, action)\nend","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"We can now do the exciting part – using an Action! Actions are at the very heart of the entire Javis library and are the foundational building blocks to make animations. Actions are what is used to draw objects on a frame, animate objects, or change objects altogether!","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Using the circ function we defined, we can execute an Action inside of the javis function to draw a head. The following invocation will create the head:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"...\n    Action(:same, :head, (args...) -> circ(O, \"black\", :stroke, 170)),\n...","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Now we are getting a - head! 😃","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"NOTE: The ellipses, ..., in the code block to produce the head represents putting the action inside of the javis function. So, the above block actually turns out to look like this:javis(video, [\n    Action(:same, :head, (args...) -> circ(O, \"black\", :stroke, 170))],\n    pathname = \"eeg.gif\", framerate = 1)","category":"page"},{"location":"tutorials/tutorial_2/#Placing-the-Electrodes","page":"Tutorial 2: What Are Actions?","title":"Placing the Electrodes","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"To draw our electrodes, it would be useful to have a frame of reference for where the electrodes are supposed to go. Let's draw some axes for our electrode locations!","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"We will need to define a new function that allows us to draw lines. This is accomplished by the following function definition:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"function draw_line(p1 = O, p2 = O, color = \"black\", action = :stroke, edge = \"solid\")\n    sethue(color)\n    setdash(edge)\n    line(p1, p2, action)\nend","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Now, we can add in some grid lines for our electrode array.  The following code places a vertical and horizontal axis as well as an inscribed circle to represent polar placement of the electrodes:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"...\n        Action(\n            :same,\n            :inside_circle,\n            (args...) -> circ(O, \"black\", :stroke, 140, \"longdashed\"),\n        ),\n        Action(\n            :same,\n            :vert_line,\n            (args...) ->\n                draw_line(Point(0, -170), Point(0, 170), \"black\", :stroke, \"longdashed\"),\n        ),\n        Action(\n            :same,\n            :horiz_line,\n            (args...) ->\n                draw_line(Point(-170, 0), Point(170, 0), \"black\", :stroke, \"longdashed\"),\n...","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Great! Now that we have the gridlines, let's add in our electrode!","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"NOTE: If you noticed, we used Symbols to mark each Action. id's can actually be used to store the returns of a function called via an Action. This functionality was introduced in Tutorial 1 and will be further explored in future tutorials. An alternative syntax that is valid is to leave out the id and instead use a comment to mark what Action does what. ","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"We have to define our own function to create an electrode. The following code accomplishes this goal:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"function electrode(\n    p = O,\n    fill_color = \"white\",\n    outline_color = \"black\",\n    action = :fill,\n    radius = 25,\n    circ_text = \"\",\n)\n    sethue(fill_color)\n    circle(p, radius, :fill)\n    sethue(outline_color)\n    circle(p, radius, :stroke)\n    text(circ_text, p, valign = :middle, halign = :center)\nend","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Essentially, all the electrode function does is draws two circles on top of each other. One circle creates a white circle for the backdrop of text provided to it and the other circle provides a black outline. ","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"From there, we need to position our electrodes! I already went through and created two lists: ","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"electrode_locations is a list of Point objects that defines where an electrode should be placed.\nelectrode_names are the names of each electrode.","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Go ahead and copy this to save yourself the time to place these perfectly. I already did this for you - aren't I great? 😉","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"electrode_locations = [\n    O,\n    Point(-70, 0),\n    Point(70, 0),\n    Point(-140, 0),\n    Point(140, 0),\n    Point(0, 70),\n    Point(-50, 70),\n    Point(50, 70),\n    Point(0, -70),\n    Point(-50, -70),\n    Point(50, -70),\n    Point(115, -80),\n    Point(-115, -80),\n    Point(115, 80),\n    Point(-115, 80),\n    Point(40, -135),\n    Point(-40, -135),\n    Point(-190, -10),\n    Point(190, -10),\n    Point(-40, 135),\n    Point(40, 135),\n]\n\n\nelectrode_names = [\n    \"Cz\",\n    \"C3\",\n    \"C4\",\n    \"T3\",\n    \"T4\",\n    \"Pz\",\n    \"P3\",\n    \"P4\",\n    \"Fz\",\n    \"F3\",\n    \"F4\",\n    \"F8\",\n    \"F7\",\n    \"T6\",\n    \"T5\",\n    \"Fp2\",\n    \"Fp1\",\n    \"A1\",\n    \"A2\",\n    \"O1\",\n    \"O2\",\n]","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Finally, we can broadcast these points and names to our previously defined electrode function:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"...\n        Action(\n            :electrodes,\n            (args...) ->\n                electrode.(\n                    electrode_locations,\n                    \"white\",\n                    \"black\",\n                    :fill,\n                    radius,\n                    electrode_names,\n                ),\n        ),\n...","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Now, executing this code block with our previously defined functions, we get this output:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/#\"If-Only-I-Had-a-Brain...\"","page":"Tutorial 2: What Are Actions?","title":"\"If Only I Had a Brain...\" 🎵","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"I think this is starting to come together quite nicely! It would appear that our subject however has no brain activity - quite alarming! 😱 Like the scarecrow from the film, The Wizard of Oz, let's give him a brain!","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"To simulate brain activity, we are going to add one more package from Julia base. This package is the Random package and it needs to be added like such:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"using Javis\nusing Random","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"From there, we need to define colors to represent no, low, medium, and high brain activity. Feel free to change up the colors! I chose these colors that need to be added to your code:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"indicators = [\"tomato\", \"darkolivegreen1\", \"gold1\", \"white\"]","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"From there, we also need to change the code block that defined the electrode locations. The previous electrode code looked like this","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"...\n        Action(\n            :electrodes,\n            (args...) ->\n                electrode.(\n                    electrode_locations,\n                    \"white\",\n                    \"black\",\n                    :fill,\n                    radius,\n                    electrode_names,\n                ),\n        ),\n...","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"However, what we now need to change is \"white\" to rand(indicators) for each electrode. An example resulting electrode would look like this:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"...\n        Action(\n            :electrodes,\n            (args...) ->\n                electrode.(\n                    electrode_locations,\n\t\t    rand(indicators),\n                    \"black\",\n                    :fill,\n                    radius,\n                    electrode_names,\n                ),\n        ),\n...","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Once all these modifications were made, execute your EEG and you should get something that looks like this:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"IT'S ALIVE!!! 🔬 We could finish this now, but let's add just a little bit more polish to it.","category":"page"},{"location":"tutorials/tutorial_2/#As-You-Can-See-Here...","page":"Tutorial 2: What Are Actions?","title":"As You Can See Here...","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Let's add some information to our animation.  We can create an info box using the following function:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"function info_box(video, action, frame)\n    fontsize(12)\n    box(140, -210, 170, 40, :stroke)\n    text(\"10-20 EEG Array Readings\", 140, -220, valign = :middle, halign = :center)\n    text(\"t = $(frame)s\", 140, -200, valign = :middle, halign = :center)\nend","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"It's invocation in the code looks like this:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"...\nAction(:same, :info, info_box),\n...","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"NOTE: The function for info_box is a little different! Each Action inside of the javis function automatically receives three objects being a Video object, which was previously defined outside of the javis function, the Action object, and the current frame number. ","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Once everything is executed, we get this very nice and clean looking animation which shows what this animation is and when parts of the brain are activated:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/#Conclusion","page":"Tutorial 2: What Are Actions?","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Congratulations! 🎉 🎉 🎉 You made a brain!  To recap, by working through this animation you should now:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Clearly understand how to use an Action \nBe able to create your own Action\nKnow how to approach complex animations\nMake meaningful information displayed easily on your animations","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Great job leveling up your Javis skills! 💪","category":"page"},{"location":"tutorials/tutorial_2/#Full-Code","page":"Tutorial 2: What Are Actions?","title":"Full Code","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"In case you ran into any issues or confusion, here is the full code:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"using Javis\nusing Random\n\nfunction ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction draw_line(p1 = O, p2 = O, color = \"black\", action = :stroke, edge = \"solid\")\n    sethue(color)\n    setdash(edge)\n    line(p1, p2, action)\nend\n\nfunction circ(p = O, color = \"black\", action = :fill, radius = 25, edge = \"solid\")\n    sethue(color)\n    setdash(edge)\n    circle(p, radius, action)\nend\n\nfunction info_box(video, action, frame)\n    fontsize(12)\n    box(140, -210, 170, 40, :stroke)\n    text(\"10-20 EEG Array Readings\", 140, -220, valign = :middle, halign = :center)\n    text(\"t = $(frame)s\", 140, -200, valign = :middle, halign = :center)\nend\n\nfunction electrode(\n    p = O,\n    fill_color = \"white\",\n    outline_color = \"black\",\n    action = :fill,\n    radius = 25,\n    circ_text = \"\",\n)\n    sethue(fill_color)\n    circle(p, radius, :fill)\n    sethue(outline_color)\n    circle(p, radius, :stroke)\n    text(circ_text, p, valign = :middle, halign = :center)\nend\n\nelectrode_locations = [\n    O,\n    Point(-70, 0),\n    Point(70, 0),\n    Point(-140, 0),\n    Point(140, 0),\n    Point(0, 70),\n    Point(-50, 70),\n    Point(50, 70),\n    Point(0, -70),\n    Point(-50, -70),\n    Point(50, -70),\n    Point(115, -80),\n    Point(-115, -80),\n    Point(115, 80),\n    Point(-115, 80),\n    Point(40, -135),\n    Point(-40, -135),\n    Point(-190, -10),\n    Point(190, -10),\n    Point(-40, 135),\n    Point(40, 135),\n]\n\nelectrode_names = [\n    \"Cz\",\n    \"C3\",\n    \"C4\",\n    \"T3\",\n    \"T4\",\n    \"Pz\",\n    \"P3\",\n    \"P4\",\n    \"Fz\",\n    \"F3\",\n    \"F4\",\n    \"F8\",\n    \"F7\",\n    \"T6\",\n    \"T5\",\n    \"Fp2\",\n    \"Fp1\",\n    \"A1\",\n    \"A2\",\n    \"O1\",\n    \"O2\",\n]\n\nradius = 15\nindicators = [\"tomato\", \"darkolivegreen1\", \"gold1\", \"white\"]\ndemo = Video(500, 500)\njavis(\n    demo,\n    [\n        BackgroundAction(1:10, ground),\n        Action(\n            :inside_circle,\n            (args...) -> circ(O, \"black\", :stroke, 140, \"longdashed\"),\n        ),\n        Action(:head, (args...) -> circ(O, \"black\", :stroke, 170)),\n        Action(\n            :vert_line,\n            (args...) ->\n                draw_line(Point(0, -170), Point(0, 170), \"black\", :stroke, \"longdashed\"),\n        ),\n        Action(\n            :horiz_line,\n            (args...) ->\n                draw_line(Point(-170, 0), Point(170, 0), \"black\", :stroke, \"longdashed\"),\n        ),\n        Action(\n            :electrodes,\n            (args...) ->\n                electrode.(\n                    electrode_locations,\n                    rand(indicators, length(electrode_locations)),\n                    \"black\",\n                    :fill,\n                    radius,\n                    electrode_names,\n                ),\n        ),\n        Action(:info, info_box),\n    ],\n    pathname = \"eeg.gif\",\n    framerate = 1,\n)\n","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Author(s): Jacob Zelko, Ole Kröger \nDate: August 11th, 2020 \nTag(s): brain, EEG, project, tutorial, electrodes, Action, BackgroundAction","category":"page"},{"location":"#Javis","page":"Home","title":"Javis","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Javis: Julia Mathematical Visualizations and Animations","category":"page"},{"location":"","page":"Home","title":"Home","text":"Mathematical animations in Julia made easy. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For releases, we follow the semantic versioning protocol and enforce the BlueStyle code style format.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Javis into your Julia installation, type into your Julia REPL the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ] add Javis","category":"page"},{"location":"","page":"Home","title":"Home","text":"That's all there is to it! 😃","category":"page"},{"location":"#Testing","page":"Home","title":"Testing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Clone the repo to your computer and go into that directory:","category":"page"},{"location":"","page":"Home","title":"Home","text":"cd Javis","category":"page"},{"location":"","page":"Home","title":"Home","text":"Open your Julia REPL and type the following within the repo:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\n(@v###) pkg> dev .\n(@v###) pkg> test Javis","category":"page"},{"location":"","page":"Home","title":"Home","text":"This might take a little bit, but if the installation on your computer is successful, it should say all tests passed. ","category":"page"},{"location":"#How-To-Develop-for-Javis","page":"Home","title":"How To Develop for Javis","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Javis is currently under heavy development. If you would like to contribute, please see the contributing guidelines.","category":"page"},{"location":"#Dependencies","page":"Home","title":"Dependencies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To develop Javis, one needs mathjax-node-cli for LaTeX support. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"npm install -g mathjax-node-cli","category":"page"},{"location":"mission/#Project-Mission","page":"Mission","title":"Project Mission","text":"","category":"section"},{"location":"mission/#What-is-Javis?","page":"Mission","title":"What is Javis?","text":"","category":"section"},{"location":"mission/","page":"Mission","title":"Mission","text":"Javis.jl is a tool focused on providing an easy to use interface for making animations and developing visualizations quickly - while having fun! :smiley:","category":"page"},{"location":"mission/","page":"Mission","title":"Mission","text":"That being said, we decided to make this mission statement to clearly explain the scope of this project. That is, to explain what this project is and what it is not. Here are the core tenents of Javis concisely explained:","category":"page"},{"location":"mission/","page":"Mission","title":"Mission","text":"Javis is not a plotting library. Though Javis can do many things, we have no intention of turning this package into a complete plotting library. There may be some elements of plotting we use in this package but it will be limited to accomplish different animation functionality (e.g. animating vectors, etc.). If we do expand the project towards plotting, we will most likely seek interoperability with packages such as Plots.jl or Gadfly.jl.\nJavis focuses on freedom for the user. We approach Javis in the same way an artist approaches an empty canvas. We provide the basic tools but it is up to the user to create most of the functionality they wish to see. Therefore, we won't provide functions that should be handled by other packages or are generally domain specific (e.g. implementing a logistic regression function, generating sparse matrices, etc.). \nJavis seeks to explore and explain. Javis should enable a user in nearly any domain the ability to better explore and explain the phenomena they are analyzing. If there are core visualization elements of a domain that you think should be added, we are open to discussion. Please open an issue and let us know.\nJavis is not neccesarilly geared towards data analytics. Admittedly, there are ways to use Javis to visualize data while creating animations. However, the intent of Javis is not focused on creating functionality to analyze datasets as of this moment. This may change in the future.\nWe love documentation and tutorials! :nerd_face: One of the things we prioritize in each release of Javis is to document functionalities of the tools we add. Furthermore, we like to make tutorials to also show what is possible in Javis. Do you have a cool animation or blog that you have written using Javis? Let us know by making an issue to let us know!","category":"page"},{"location":"mission/#Summary","page":"Mission","title":"Summary","text":"","category":"section"},{"location":"mission/","page":"Mission","title":"Mission","text":"In summary, Javis.jl focuses on creating an easy to use interface written in Julia to create visualizations and animations. What Javis is, is a tool for exploration that gives great freedom and flexibility to a user. What it is not is a domain specific library for making a limited subset of visualizations or a true data analytics tool.","category":"page"},{"location":"mission/#Acknowledgements","page":"Mission","title":"Acknowledgements","text":"","category":"section"},{"location":"mission/","page":"Mission","title":"Mission","text":"Our project mission was inspired by the mission, philosophy, and interface of projects such as Fedora, Zotero, Spaceship ZSH, and rclone.","category":"page"},{"location":"tutorials/tutorial_1/#**Tutorial-1:**-Making-Your-First-Javis-Animation!","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"","category":"section"},{"location":"tutorials/tutorial_1/#Introduction","page":"Tutorial 1: Making Your First Javis Animation!","title":"Introduction","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"If you are reading this tutorial, I am going to assume this is the first time you are using Javis to create an animation. In that case, welcome to Javis! 😃 By following this tutorial, we are going to make you a director of your very own animations written in pure Julia! 🎬 🎥","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"If you have not installed Javis yet, please visit the homepage to read the installation instructions.","category":"page"}]
}
