var documenterSearchIndex = {"docs":
[{"location":"references/","page":"References","title":"References","text":"CurrentModule = Javis","category":"page"},{"location":"references/#Public-functions","page":"References","title":"Public functions","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Modules = [Javis]\nPrivate = false","category":"page"},{"location":"references/#Javis.Action","page":"References","title":"Javis.Action","text":"Action <: AbstractAction\n\nA Action can be used in the keyword arguments of an Object to define small sub objects on the object function, such as appear.\n\nA Action should not be created by hand but instead by using one of the constructors.\n\nFields\n\nframes::Frames: the frames relative to the parent Object\nanim::Animation: defines the interpolation function for the transition\nfunc::Function: the function that gets called in each of those frames.   Takes the following arguments: video, object, action, rel_frame\ntransition::Transition: A Translation\ninternal_transition::InternalTransition:   A transition which stores the current transition for a specific frame.\ndefs::Dict{Symbol, Any} any kind of definitions that are relevant for the action.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Action-Tuple{Union{Function, Javis.Transition}}","page":"References","title":"Javis.Action","text":"Action([frames], [Animation], func::Union{Function, Transition})\n\nAn Action gives an Object the opportunity to move, change color or much more. It can be defined in many different ways.\n\nArguments\n\nframes can be a Symbol, a UnitRange or a relative way to define frames see Rel\nDefault: If not defined it will be the same as the previous Action or   if it's the first action then it will be applied for the whole length of the object.\nIt defines for which frames the action acts on the object.\nThese are defined in a relative fashion so 1:10 means the first ten frames of the object   and not the first ten frames of the Video\nanimation can be an easing function or animation which can be defined by Animations.jl\nDefault: The default is linear()\nPossible simple easing functions is sineio() for more check   Animations.jl\nfunc is either a Function or a Transition\nThis is the actual action that is applied to the parent object.\nIt can be either a general function which takes in the following four arguments\nvideo, object, action, rel_frame\nIf you don't need them you can write (args...)->your_function(arg1, arg2)\nYou often don't need an own function and instead can use predefined functions like\nappear, disappear, follow_path\nAnother way is to define a transition with\nTranslation\nRotation\nScaling\n\nExample\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nvideo = Video(500, 500)\nBackgroundObject(1:100, ground)\nobj = Object((args...)->circle(O, 50, :fill))\nact!(obj, Action(1:20, appear(:fade)))\nact!(obj, Action(21:50, Translation(50, 50)))\nact!(obj, Action(51:80, Translation(-50, -50)))\nact!(obj, Action(81:100, disappear(:fade)))\nrender(video; pathname=\"test.gif\")\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Line","page":"References","title":"Javis.Line","text":"Line\n\nA type to define a line by two points. Can be used i.e. in projection We mean the mathematic definition of a continuous line and not a segment of a line.\n\nFields\n\np1::Point: start point\np2::Point: second point to define the line\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Object","page":"References","title":"Javis.Object","text":"Object\n\nDefines what is drawn in a defined frame range.\n\nFields\n\nframes::Frames: A range of frames for which the Object is called\nfunc::Function: The drawing function which draws something on the canvas.   It gets called with the arguments video, object, frame\nstart_pos::Point defines the origin of the object. It gets translated to this point\nactions::Vector{Action} a list of actions applied to this object\ncurrent_setting:: The current state of the object see ObjectSetting\nopts::Any can hold any options defined by the user\nchange_keywords::Dict{Symbol,Any} the modified keywords changed by change\nresult::Vector the result of the object (if something gets returned)\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Object-Tuple{Any,Function,Point}","page":"References","title":"Javis.Object","text":"Object([frames], func::Function, [start_pos]; kwargs...)\n\nArguments\n\nframes can be a Symbol, a UnitRange or a relative way to define frames see Rel\nDefault: If not defined it will be the same as the previous Object.\nImportant: The first Object needs the frames specified as a UnitRange.\nIt defines for which frames the object is active\nfunc is a Function and the only required argument\nThis defines the actual object that gets drawn.\nThe function takes the following three arguments:\nvideo, object, frame\nIf you don't need them you can write (args...)->your_function(arg1, arg2)\n\nExample\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nvideo = Video(500, 500)\nBackgroundObject(1:100, ground)\nObject((args...)->circle(O, 50, :fill))\nrender(video; pathname=\"test.gif\")\n\nHere the BackgroundObject uses the named way of defining the function whereas the circle object is defined in the anonymous function (args...)->circle(O, 50, :fill). It basically depends whether you want to have a simple Luxor object or something more complex.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Rel","page":"References","title":"Javis.Rel","text":"Rel\n\nAbility to define frames in a relative fashion.\n\nExample\n\nBackgroundObject(1:100, ground)\nObject(1:90, (args...)->circ(\"red\"))\nObject(Rel(10), (args...)->circ(\"blue\"))\nObject((args...)->circ(\"red\"))\n\nis the same as\n\nBackgroundObject(1:100, ground)\nObject(1:90, (args...)->circ(\"red\"))\nObject(91:100, (args...)->circ(\"blue\"))\nObject(91:100, (args...)->circ(\"red\"))\n\nFields\n\nrel::UnitRange defines the frames in a relative fashion.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Rel-Tuple{Int64}","page":"References","title":"Javis.Rel","text":"Rel(i::Int)\n\nShorthand for Rel(1:i)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Rotation","page":"References","title":"Javis.Rotation","text":"Rotation <: Transition\n\nStores the rotation similar to Translation with from and to but also the rotation point.\n\nFields\n\nfrom::Union{Float64, AbstractObject}: The start rotation or a link to it\nto::Union{Float64, AbstractObject}: The end rotation or a link to it\ncenter::Union{Point, AbstractObject}: The center of the rotation or a link to it.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Rotation-Tuple{Any,Any}","page":"References","title":"Javis.Rotation","text":"Rotation(from, to)\n\nRotation as a transition from from to to (in radians) around the origin.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Rotation-Tuple{Union{Float64, Javis.AbstractObject},Union{Point, Javis.AbstractObject}}","page":"References","title":"Javis.Rotation","text":"Rotation(r::Union{Float64, AbstractObject}, center::Union{Point, AbstractObject})\n\nRotation as a transition from 0.0 to r around center. Can be used as a short-hand for rotating around a center point.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Rotation-Tuple{Union{Float64, Javis.AbstractObject}}","page":"References","title":"Javis.Rotation","text":"Rotation(r::Union{Float64, AbstractObject})\n\nRotation as a transition from 0.0 to r . Can be used as a short-hand.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Scaling","page":"References","title":"Javis.Scaling","text":"Scaling <: Transition\n\nStores the scaling similar to Translation with from and to.\n\nExample\n\nCan be called with different constructors like:\n\nScaling(10) -> Scaling(CURRENT_SCALING, (10.0, 10.0))\nScaling(10, :my-scale) -> Scaling((10.0, 10.0), :my_scale)\nScaling(10, 2) -> Scaling((10.0, 10.0), (2.0, 2.0))\nScaling(10, (1,2)) -> Scaling((10.0, 10.0), (1.0, 2.0))\n\nAttention: This always scales from the origin. For scaling of objects you might want to use change instead.\n\nFields\n\nfrom::Union{Tuple{Float64, Float64}, Symbol, AbstractObject}: The start scaling or a link to it\nto::Union{Tuple{Float64, Float64}, Symbol, AbstractObject}: The end scaling or a link to it\ncompute_from_once::Bool: Saves whether the from is computed for the first frame or   every frame. Is true if from is :_current_scale.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Transformation","page":"References","title":"Javis.Transformation","text":"Transformation\n\nDefines a transformation which can be returned by an object to be accessible later. See the circ function inside the javis as an example.\n\nIt can be accessed by another [Object])(@ref) using the symbol notation like :red_ball in the example.\n\nFields\n\np::Point: the translation part of the transformation\nangle::Float64: the angle component of the transformation (in radians)\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Translation","page":"References","title":"Javis.Translation","text":"Translation <: Transition\n\nStores the Point or a link for the start and end position of the translation\n\nFields\n\nfrom::Union{Point, Symbol}: The start position or a link to the start position.     See :red_ball in javis to::Union{Point, Symbol}: The end position or a link to the end position\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Translation-Tuple{Real,Real}","page":"References","title":"Javis.Translation","text":"Translation(x::Real, y::Real)\n\nCreate a Translation(O, Point(x,y)) such that a translation is done from the origin. Shorthand for writing Translation(Point(x,y)).\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Translation-Tuple{Union{Point, Symbol}}","page":"References","title":"Javis.Translation","text":"Translation(p::Union{Point, Symbol})\n\nCreate a Translation(O, p) such that a translation is done from the origin.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Video","page":"References","title":"Javis.Video","text":"Video\n\nDefines the video canvas for an animation.\n\nFields\n\nwidth::Int the width in pixel\nheight::Int the height in pixel\nobjects::Vector{AbstractObject} the objects defined in this video\ndefs::Dict{Symbol, Any} Some definitions which should be accessible throughout the video.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Video-Tuple{Any,Any}","page":"References","title":"Javis.Video","text":"Video(width, height)\n\nCreate a video with a certain width and height in pixel. This also sets CURRENT_VIDEO.\n\n\n\n\n\n","category":"method"},{"location":"references/#Base.:*-Tuple{Array{Float64,2},Transformation}","page":"References","title":"Base.:*","text":"Base.:*(m::Array{Float64,2}, transformation::Transformation)\n\nConvert the transformation to a matrix and multiplies m*trans_matrix. Return a new Transformation\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.BackgroundObject-Tuple{Any,Function,Vararg{Any,N} where N}","page":"References","title":"Javis.BackgroundObject","text":"BackgroundObject(frames, func)\n\nThe BackgroundObject is internally just an Object and can be defined the same way. In contrast to an object this a BackgroundObject will change the global canvas and not just a layer. Normally it's used to define defaults and the background color. See Luxor.background\n\nExample\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nvideo = Video(500, 500)\nBackgroundObject(1:100, ground)\nObject((args...)->circle(O, 50, :fill))\nrender(video; pathname=\"test.gif\")\n\nThis draws a white circle on a black background as sethue is defined for the global frame.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.ang-Tuple{Any}","page":"References","title":"Javis.ang","text":"ang(x)\n\nang is just a short-hand for get_angle\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.appear-Tuple{Symbol}","page":"References","title":"Javis.appear","text":"appear(s::Symbol)\n\nAppear can be used inside an Action to let an Object appear.\n\nExample\n\nhouse = Object(101:200, (args...)->house_of_nicholas())\nact!(house, Action(1:20, appear(:fade)))\nact!(house, Action(81:100, disappear(:fade)))\n\nIn this case the house_of_nicholas will fade in during the first 20 frames of the Object so 101-120.\n\nArguments\n\ns::Symbol: the symbol defines the animation of appearance   The only symbols that are currently supported are:\n:fade_line_width which increases the line width up to the default value  or the value specified by setline\n:fade which increases the opcacity up to the default value  or the value specified by setopacity\n:scale which increases the scale up to the default value 1  or the value specified by scale\n:draw_text which only works for text and lets it appear from left to right.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.change-Tuple{Symbol,Pair}","page":"References","title":"Javis.change","text":"change(s::Symbol, [vals::Pair])\n\nChanges the keyword s of the parent Object from vals[1] to vals[2] in an animated way.\n\nArguments\n\ns::Symbol Change the keyword with the name s\nvals::Pair If vals is given i.e 0 => 25 it will be animated from 0 to 25.\nThe default is to use 0 => 1 or use the value given by the animation\ndefined in the SubAction\n\nExample\n\nBackgroundObject(1:100, ground)\nobj = Object((args...; radius = 25) -> object(O, radius, \"red\"), Point(100, 0))\nact!(obj, Action(1:50, change(:radius, 25 => 0)))\nact!(Action(51:100, change(:radius, 0 => 25)))\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.disappear-Tuple{Symbol}","page":"References","title":"Javis.disappear","text":"disappear(s::Symbol)\n\nDisappear can be used inside an Action  to let an Object disappear.\n\nExample\n\nhouse = Object(101:200, (args...)->house_of_nicholas())\nact!(house, Action(1:20, appear(:fade)))\nact!(house, Action(81:100, disappear(:fade)))\n\nIn this case the house_of_nicholas will fade out during the last 20 frames of the Object so 181-200.\n\nArguments\n\ns::Symbol: the symbol defines the animation of disappearance   The only symbols that are currently supported are:\n:fade_line_width which decreases the line width down to 0\n:fade which decreases the opacity down to 0\n:scale which decreases the scale down to 0\n:draw_text which only works for text and let the text disappear from right to left.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_grid-Tuple{}","page":"References","title":"Javis.draw_grid","text":"draw_grid(video::Video, object::AbstractObject, frame::Int; direction::AbstractString = \"TR\", line_gap = 25)\n\nDraws an oriented grid on the given frame of a Video.\n\nArguments\n\ndirection::AbstractString: Where grid animation finishes. Default: \"TR\" Available Orientations:\n\"TR\" - Animation finishes in the Top Right corner of the frame.\n\"TL\" - Animation finishes in the Top Left corner of the frame.\n\"BR\" - Animation finishes in the Bottom Right corner of the frame.\n\"BL\" - Animation finishes in the Bottom Left corner of the frame.\nline_gap: How many pixels between each line. Default: 25\n\nExample\n\nExample call of this function within an Object.\n\n...\n Object(1:100, :line, draw_grid(direction = \"TL\", line_gap = 25))\n...\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.follow_path-Tuple{Array{Point,1}}","page":"References","title":"Javis.follow_path","text":"follow_path(points::Vector{Point}; closed=true)\n\nCan be applied inside a action such that the parent object follows a path. It takes a vector of points which can be created as an example by calling circle(O, 50) <- notice that the object is set to :none the default.\n\nExample\n\nAction(1:150, follow_path(star(O, 300)))\n\nArguments\n\npoints::Vector{Point} - the vector of points the object should follow\n\nKeywords\n\nclosed::Bool default: true, sets whether the path is a closed path as for example when   using a circle, ellipse or any polygon. For a bezier path it should be set to false.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.fontsize-Tuple{Any}","page":"References","title":"Javis.fontsize","text":"fontsize(fsize)\n\nSame as Luxor.fontsize: Sets the current font size.\n\nExample\n\nfontsize(12)\ntext(\"Hello World!\")\n\nArguments:\n\nfsize: the new font size\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_angle-Tuple{Javis.AbstractObject}","page":"References","title":"Javis.get_angle","text":"get_angle(obj::AbstractObject)\n\nGet access to the angle that got saved in a previous object.\n\nReturns\n\nFloat64: the angle stored by a previous object i.e via return Transformation(p, angle)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_fontsize-Tuple{}","page":"References","title":"Javis.get_fontsize","text":"get_fontsize(fsize)\n\nSame as Luxor.get_fontsize but works with every version of Luxor that is supported by Javis.\n\nExample\n\nfontsize(12)\nfsize = get_fontsize()\ntext(\"Hello World! $fsize\")\n\nReturns\n\nFloat64: the current font size\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_position-Tuple{Object}","page":"References","title":"Javis.get_position","text":"get_position(obj::Object)\n\nGet access to the position that got saved in a previous object.\n\nReturns\n\nPoint: the point stored by a previous object.\n\nThrows\n\nIf the function of Object didn't return a Point or Transformation\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_value-Tuple{Symbol}","page":"References","title":"Javis.get_value","text":"get_value(s::Symbol)\n\nGet access to the value that got saved in s by a previous object. If you want to access a position or angle check out get_position and get_angle.\n\nReturns\n\nAny: the value stored by a previous object.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.latex-Tuple{LaTeXStrings.LaTeXString,Point,Symbol}","page":"References","title":"Javis.latex","text":"latex(text::LaTeXString, pos::Point, object::Symbol)\n\nAdd the latex string text to the top left corner of the LaTeX path. Can be added to Luxor.jl graphics via Video.\n\nNOTES:\n\nThis only works if tex2svg is installed.   It can be installed using the following command (you may have to prefix this command with sudo depending on your installation):\n  npm install -g mathjax-node-cli\nThe latex method must be called from within an Object.\n\nArguments\n\ntext::LaTeXString: a LaTeX string to render.\npos::Point: position of the upper left corner of the latex text. Default: O\ncan be written as x, y instead of Point(x, y)\nobject::Symbol: graphics objects defined by Luxor.jl. Default :stroke.\n\nAvailable objects:\n\n:stroke - Draws the latex string on the canvas. For more info check Luxor.strokepath\n:path - Creates the path of the latex string but does not render it to the canvas.\n\nThrows\n\nIOError: mathjax-node-cli is not installed\n\nExample\n\nusing Javis\nusing LaTeXStrings\n\nfunction ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction draw_latex(video, object, frame)\n    fontsize(50)\n    x = 100\n    y = 120\n    latex(L\"\\sqrt{5}\", x, y)\nend\n\ndemo = Video(500, 500)\nBackgroundObject(1:2, ground)\nObject(draw_latex)\nrender(demo; pathname = \"latex.gif\")\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.morph_to-Tuple{Function}","page":"References","title":"Javis.morph_to","text":"morph_to(to_func::Function; object=:stroke)\n\nA closure for the _morph function. This makes it easier to write the function inside an Object.\n\nCurrently morphing is quite simple and only works for basic shapes. It especially does not work with functions which produce more than one polygon or which produce filled polygons. Blending between fills of polygons is definitely coming at a later stage.\n\nImportant: The functions itself should not draw the polygon i.e. use circle(Point(100,100), 50) instead of circle(Point(100,100), 50, :stroke)\n\nArguments\n\nto_func::Function: Same as from_func but it defines the \"result\" polygon,                      which will be displayed at the end of the Object\n\nKeywords\n\nobject::Symbol defines whether the object has a fill or just a stroke. Defaults to stroke.\n\nExample\n\nThis creates a star that morphs into a circle and back.\n\nastar(args...) = star(O, 50)\nacirc(args...) = circle(Point(100,100), 50)\n\nvideo = Video(500, 500)\nback = BackgroundObject(1:20, ground)\nstar_obj = Object(1:10, astar)\nact!(star_obj, Action(linear(), morph_to(acirc)))\ncircle_obj = Object(11:20, acirc)\nact!(circle_obj, Action(:same, morph_to(astar)))\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.pos-Tuple{Any}","page":"References","title":"Javis.pos","text":"pos(x)\n\npos is just a short-hand for get_position\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.projection-Tuple{Point,Line}","page":"References","title":"Javis.projection","text":"projection(p::Point, l::Line)\n\nReturn the projection of a point to a line.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.render-Tuple{Video}","page":"References","title":"Javis.render","text":"render(\n    video::Video;\n    framerate=30,\n    pathname=\"javis_GIBBERISH.gif\",\n    tempdirectory=\"\",\n    liveview=false\n)\n\nRenders the previously defined video with all its Object to a gif or mp4 file.\n\nArguments\n\nvideo::Video: The video which defines the dimensions of the output\n\nKeywords\n\nframerate::Int: The frame rate of the video\npathname::String: The path for the rendered gif or mp4 (i.e output.gif or output.mp4)\nDefault: The animation is rendered as a gif with the javis_ prefix and some gibberish afterwards\ntempdirectory::String: The folder where each frame is stored   Defaults to a temporary directory when not set\nliveview::Bool: Causes a live image viewer to appear to assist with animation development\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.rev-Tuple{Animations.Easing}","page":"References","title":"Javis.rev","text":"rev(e::Easing)\n\nReverse an easing function such that easing_to_animation maps it to [1.0, 0.0] instead of [0.0, 1.0]. An example can be seen in rotate\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.rotate_around-Tuple{Point}","page":"References","title":"Javis.rotate_around","text":"rotate_around(p::Point)\n\nRoyaye an Object using an Action and an Animation defined with Animations.jl around a point p. For rotate it rotates around the current origin.\n\nAn example can be seen in rotate.\n\nArguments\n\np::Point: the point to rotate around\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.scale-Tuple{Any,Any}","page":"References","title":"Javis.scale","text":"scale(scl_x, scl_y)\n\nSame as scale but the x scale and y scale can be changed independently.\n\nArguments:\n\nscl_x: scale in x direction\nscl_y: scale in y direction\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.scale-Tuple{Number}","page":"References","title":"Javis.scale","text":"scale(scl)\n\nSet the scale and multiply it with the current multiplier which is i.e. set by appear and disappear.\n\nNormal behavior without any animation is the same as Luxor.scale.\n\nExample\n\nscale(0.5)\ncircle(O, 20, :fill) # the radius would be 10 because of the scaling\n\nArguments:\n\nscl: the new default scale\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.scale-Tuple{}","page":"References","title":"Javis.scale","text":"scale()\n\nScale a function defined inside a Action using an Animation defined with Animations.jl around the point p.\n\nAn example can be seen in rotate.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.scaleto-Tuple{Any,Any}","page":"References","title":"Javis.scaleto","text":"scaleto(x, y)\n\nScale to a specific scaling instead of multiplying it with the current scale. For scaling on top of the current scale have a look at scale.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.setline-Tuple{Any}","page":"References","title":"Javis.setline","text":"setline(linewidth)\n\nSet the line width and multiply it with the current multiplier which is i.e. set by appear and disappear.\n\nNormal behavior without any animation is the same as Luxor.setline.\n\nExample\n\nsetline(10)\nline(O, Point(10, 10))\n\nArguments:\n\nlinewidth: the line width in pixel\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.setopacity-Tuple{Any}","page":"References","title":"Javis.setopacity","text":"setopacity(opacity)\n\nSet the opacity and multiply it with the current multiplier which is i.e. set by appear and disappear.\n\nNormal behavior without any animation is the same as Luxor.setopacity.\n\nExample\n\nsetopacity(0.5)\ncircle(O, 20, :fill)\n\nArguments:\n\nopacity: the opacity between 0.0 and 1.0\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.text","page":"References","title":"Javis.text","text":"text(str, pos = O; valign = :baseline, halign = :left, angle = 0.0)\n\nHas bacially the same functionality as Luxor.text but overrides that method to allow to animate text with appear.\n\nExample\n\ntext_obj = Object(1:100, (args...) -> text(\"Hello Stream!\"; halign = :center))\nact!(text_obj, Action(1:15, sineio(), appear(:draw_text)))\nact!(text_obj, Action(76:100, sineio(), disappear(:draw_text)))\n\ndraws the text from left to right in the first 15 frames and in the last 15 frames it disappears.\n\nArguments\n\nstr::AbstractString the string that should be shown\npos::Point defaults to the origin and can be written as x,y as well as Point(x,y).\n\nKeywords\n\nvalign::Symbol defaults to :baseline and takes (:top, :middle, :bottom, :baseline)\nhalign::Symbol defaults to :left and takes (:left, :center, :centre, :right)\nangle::Float64 defaults to 0.0 and specifies the angle of the text\n\n\n\n\n\n","category":"function"},{"location":"references/#Javis.val-Tuple{Any}","page":"References","title":"Javis.val","text":"val(x)\n\nval is just a short-hand for get_value\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.zero_lines-Tuple{}","page":"References","title":"Javis.zero_lines","text":"zero_lines(video::Video, object::AbstractObject, frame::Int; direction::AbstractString = \"TR\",             line_thickness = 10)\n\nDraws zero lines on the given frame of a Video.\n\nArguments\n\ndirection::AbstractString: Direction for how vertical and horizontal axes are drawn.\n\nDefault: \"TR\" Available Orientations:\n\n\"TR\" - Vertical axis drawn towards the Top and horizontal axis drawn to the Right of the frame.\n\"TL\" - Vertical axis drawn towards the Top and horizontal axis drawn to the Left of the frame.\n\"BR\" - Vertical axis drawn towards the Bottom and horizontal axis drawn to the Right of the frame.\n\"BL\" - Vertical axis drawn towards the Bottom and horizontal axis drawn to the Left of the frame.\nline_thickness: Defines the thickness of the zero lines. Default: 10\n\nExample\n\nThis example will produce an animation with the vertical axis being drawn towards the top and the horizontal axis being drawn towards the left. One will need to define their own path for tempdirectory and pathname.\n\n...\n Object(1:100, :line, zero_lines(direction = \"TL\", line_thickness = 10)),\n...\n\n\n\n\n\n","category":"method"},{"location":"references/#Luxor.rotate-Tuple{}","page":"References","title":"Luxor.rotate","text":"rotate()\n\nRotate an Object using an Action and an Animation defined with Animations.jl.\n\nIf you're used to working with Animations.jl this should feel quite natural. Instead of defining each movement in its own action it's possible to define it in one by using an Animation.\n\nExample\n\nusing Javis, Animations\n\n# define ground function here\n\nvideo = Video(500, 500)\ntranslate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [O, Point(150, 0)],\n    [sineio()],\n)\n\ntranslate_back_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [O, Point(-150, 0)],\n    [sineio()],\n)\n\nrotate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [0, 2π],\n    [linear()],\n)\n\nBackgroundObject(1:150, ground)\nball = Object((args...) -> circle(O, 25, :fill))\nact!(ball, Action(1:10, sineio(), scale()))\nact!(ball, Action(11:50, translate_anim, translate()))\nact!(ball, Action(51:100, rotate_anim, rotate_around(Point(-150, 0))))\nact!(ball, Action(101:140, translate_back_anim, translate()))\nact!(ball, Action(141:150, rev(sineio()), scale()))\n\nrender(video)\n\nwhich uses the Action syntax five times with both easing functions directly and animation objects. The rev(sineio()) creates an Animation which goes from 1.0 to 0.0.\n\n\n\n\n\n","category":"method"},{"location":"references/#Luxor.sethue-Tuple{}","page":"References","title":"Luxor.sethue","text":"sethue()\n\nSet the color of an Object using an Action and an Animation defined with Animations.jl.\n\nExample\n\nA possible animation would look like this:\n\ncolor_anim = Animation(\n    [0, 0.5, 1], # must go from 0 to 1\n    [\n        Lab(colorant\"red\"),\n        Lab(colorant\"cyan\"),\n        Lab(colorant\"black\"),\n    ],\n    [sineio(), sineio()],\n)\n\nAn example on how to integrate this into an Action can be seen in rotate. Where this would be a valid Action: Action(1:150, color_anim, sethue()).\n\n\n\n\n\n","category":"method"},{"location":"references/#Luxor.translate-Tuple{}","page":"References","title":"Luxor.translate","text":"translate()\n\nTranslate an Object using an Action and an Animation defined with Animations.jl.\n\nIf you're used to working with Animations.jl this should feel quite natural. Instead of defining each movement in its own action it's possible to define it in one by using an Animation.\n\nExample\n\nusing Javis, Animations\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nvideo = Video(500, 500)\ncircle_anim = Animation(\n    [0.0, 0.3, 0.6, 1.0], # must go from 0 to 1\n    # the circle will move from the origin to `Point(150, 0)` then `Point(150, 150)`\n    # and back to the origin `O`.\n    [O, Point(150, 0), Point(150, 150), O],\n    [sineio(), polyin(5), expin(8)],\n)\n\nBackgroundObject(1:150, ground)\nobj = Object((args...)->circle(O, 25, :fill))\nact!(obj, Action(1:150, circle_anim, translate()))\n\nrender(video)\n\nThis notation uses the Animations.jl library very explicitly. It's also possible to do the same with:\n\nobj = Object((args...)->circle(O, 25, :fill))\nact!(obj, Action(1:50, sineio(), Translation(150, 0)))\nact!(obj, Action(51:100, polyin(2), Translation(0, 150)))\nact!(obj, Action(101:150, expin(8), Translation(-150, -150)))\n\nwhich uses the Action syntax three times and only uses easing functions instead of specifying the Animation directly.\n\nHere circle_anim defines the movement of the circle. The most important part is that the time in animations has to be from 0.0 to 1.0.\n\n\n\n\n\n","category":"method"},{"location":"references/#Private-functions","page":"References","title":"Private functions","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Modules = [Javis]\nPublic = false","category":"page"},{"location":"references/#Javis.CURRENT_OBJECT","page":"References","title":"Javis.CURRENT_OBJECT","text":"CURRENT_OBJECT\n\nholds the current object in an array to be declared as a constant The current object can be accessed using CURRENT_OBJECT[1]\n\n\n\n\n\n","category":"constant"},{"location":"references/#Javis.CURRENT_VIDEO","page":"References","title":"Javis.CURRENT_VIDEO","text":"CURRENT_VIDEO\n\nholds the current video in an array to be declared as a constant The current video can be accessed using CURRENT_VIDEO[1]\n\n\n\n\n\n","category":"constant"},{"location":"references/#Javis.Frames","page":"References","title":"Javis.Frames","text":"Frames\n\nStores the actual computed frames and the user input which can be :same or Rel(10). The frames are computed in javis.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.InternalRotation","page":"References","title":"Javis.InternalRotation","text":"InternalRotation <: InternalTransition\n\nSaves a rotation as described by Rotation for the current frame. Is part of the Object struct.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.InternalScaling","page":"References","title":"Javis.InternalScaling","text":"InternalScaling <: InternalTransition\n\nSaves a scaling as described by Scaling for the current frame. Is part of the Object struct.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.InternalTranslation","page":"References","title":"Javis.InternalTranslation","text":"InternalTranslation <: InternalTransition\n\nSaves a translation as described by Translation for the current frame. Is part of the Object struct.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.ObjectSetting","page":"References","title":"Javis.ObjectSetting","text":"ObjectSetting\n\nThe current settings of an Object which are saved in object.current_setting.\n\nFields\n\nline_width::Float64: the current line width\nmul_line_width::Float64: the current multiplier for line width.   The actual line width is then: mul_line_width * line_width\nopacity::Float64: the current opacity\nmul_opacity::Float64: the current multiplier for opacity.   The actual opacity is then: mul_opacity * opacity\nfontsize::Float64 the current font size\nshow_object::Bool is set to false if scale would be 0.0 which is forbidden by Cairo\ncurrent_scale::Tuple{Float64, Float64}: the current scale\ndesired_scale::Tuple{Float64, Float64}: the new desired scale\nmul_scale::Float64: the multiplier for the new desired scale.   The actual new scale is then: mul_scale * desired_scale\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.ReversedEasing","page":"References","title":"Javis.ReversedEasing","text":"ReversedEasing\n\nWill be used to reverse an easing inside easing_to_animation. Can be constructed from an easing function using rev.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis._decrement-Tuple{Video,Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Gtk.GtkCanvas,Int64}","page":"References","title":"Javis._decrement","text":"_decrement(video::Video, widgets::Vector, objects::Vector, dims::Vector,\n    canvas::Gtk.Canvas, frames::Int)\n\nDecrements a given value and returns the associated frame.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._draw_image-Tuple{Video,Array{T,1} where T,Int64,Gtk.GtkCanvas,Array{T,1} where T}","page":"References","title":"Javis._draw_image","text":"_draw_image(video::Video, objects::Vector, frame::Int, canvas::Gtk.Canvas,\nimg_dims::Vector)\n\nInternal function to create an image that is drawn on a Gtk Canvas.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._increment-Tuple{Video,Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Gtk.GtkCanvas,Int64}","page":"References","title":"Javis._increment","text":"_increment(video::Video, widgets::Vector, objects::Vector, dims::Vector,\n    canvas::Gtk.Canvas, frames::Int)\n\nIncrements a given value and returns the associated frame.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._javis_viewer","page":"References","title":"Javis._javis_viewer","text":" _javis_viewer(video::Video, frames::Int, object_list::Vector, show::Bool)\n\nInternal Javis Viewer built on Gtk that is called for live previewing.\n\n\n\n\n\n","category":"function"},{"location":"references/#Javis._morph_to-Tuple{Video,Javis.AbstractObject,Javis.AbstractAction,Any,Function}","page":"References","title":"Javis._morph_to","text":"_morph_to(video::Video, object::AbstractObject, frame, from_func::Function, to_func::Function; draw_object=:stroke)\n\nInternal version of morph but described there.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.animate_text-Tuple{Any,Point,Symbol,Symbol,Float64,Float64}","page":"References","title":"Javis.animate_text","text":"animate_text(\n    str,\n    pos::Point,\n    valign::Symbol,\n    halign::Symbol,\n    angle::Float64,\n    t::Float64,\n)\n\nThis function is used as a subfunction of text and animates the str by clipping the textoutlines and creating a growing circle in the lower left corner to display the text from left to right in an animated fashion.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.compute_frames!-Union{Tuple{Array{UA,1}}, Tuple{UA}} where UA<:Union{Javis.AbstractAction, Javis.AbstractObject}","page":"References","title":"Javis.compute_frames!","text":"compute_frames!(elements::Vector{UA}; last_frames=nothing)\n    where UA<:Union{AbstractObject,AbstractAction}\n\nSet elem.frames.frames to the computed frames for each elem in elements.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.compute_transition!-Tuple{Javis.AbstractAction,Video,Int64}","page":"References","title":"Javis.compute_transition!","text":"compute_transition!(action::AbstractAction, video::Video, frame::Int)\n\nUpdate action.internal_transition for the current frame number\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.compute_transition!-Tuple{Javis.InternalRotation,Rotation,Any,Javis.AbstractAction,Any}","page":"References","title":"Javis.compute_transition!","text":"compute_transition!(internal_rotation::InternalRotation, rotation::Rotation, video,\n                    action::AbstractAction, frame)\n\nComputes the rotation transformation for the action. If the Rotation is given directly it uses the frame number for interpolation. If rotation includes symbols the current definition of that look up is used for computation.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.compute_transition!-Tuple{Javis.InternalScaling,Scaling,Any,Javis.AbstractAction,Any}","page":"References","title":"Javis.compute_transition!","text":"compute_transition!(internal_translation::InternalScaling, translation::Scaling,\n                    video, action::AbstractAction, frame)\n\nComputes the scaling transformation for the action. If the scaling is given directly it uses the frame number for interpolation. If scaling includes symbols, the current definition of that symbol is looked up and used for computation.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.compute_transition!-Tuple{Javis.InternalTranslation,Translation,Any,Javis.AbstractAction,Any}","page":"References","title":"Javis.compute_transition!","text":"compute_transition!(internal_translation::InternalTranslation, translation::Translation,\n                    video, action::AbstractAction, frame)\n\nComputes the translation transformation for the action. If the translation is given directly it uses the frame number for interpolation. If translation includes symbols the current definition of that symbol is looked up and used for computation.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.create_internal_transition!-Tuple{Javis.AbstractAction}","page":"References","title":"Javis.create_internal_transition!","text":"create_internal_transition!(action::AbstractAction)\n\nThe translation gets a representative action.internal_transition.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_obj-Tuple{Val{:g},Any,Any}","page":"References","title":"Javis.draw_obj","text":"draw_obj(::Val{:g}, o, defs)\n\nDraws a group by setting the attributes (like transformations) and then calls draw_obj for all child elements.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_obj-Tuple{Val{:path},Any,Any}","page":"References","title":"Javis.draw_obj","text":"draw_obj(::Val{:path}, o, defs)\n\nCalls the commands specified in the path data. Currently supports only a subset of possible SVG commands.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_obj-Tuple{Val{:rect},Any,Any}","page":"References","title":"Javis.draw_obj","text":"draw_obj(::Val{:rect}, o, defs)\n\nDraw the rectangle defined by the object o.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_obj-Tuple{Val{:use},Any,Any}","page":"References","title":"Javis.draw_obj","text":"draw_obj(::Val{:use}, o, defs)\n\nCalls the command specified in defs.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_object-NTuple{4,Any}","page":"References","title":"Javis.draw_object","text":"draw_object(object, video, frame, origin_matrix)\n\nIs called inside the javis and does everything handled for an AbstractObject. It is a 4-step process:\n\ntranslate to the start position\ncall the relevant actions\ncall the object function\nsave the result of the object if wanted inside video.defs\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.easing_to_animation-Tuple{Any}","page":"References","title":"Javis.easing_to_animation","text":"easing_to_animation(easing)\n\nConverts an easing to an Animation with time goes from 0.0 to 1.0 and value from 0 to 1.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.easing_to_animation-Tuple{Javis.ReversedEasing}","page":"References","title":"Javis.easing_to_animation","text":"easing_to_animation(rev_easing::ReversedEasing)\n\nConverts an easing to an Animation with time goes from 0.0 to 1.0 and value from 1 to 0.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.float_attribute-Tuple{LightXML.XMLElement,Any}","page":"References","title":"Javis.float_attribute","text":"float_attribute(o, name)\n\nGet the attribute name of the XMLElement and parse it as a Float64\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_current_setting-Tuple{}","page":"References","title":"Javis.get_current_setting","text":"get_current_setting()\n\nReturn the current setting of the current object\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_frames-Tuple{Rel,UnitRange}","page":"References","title":"Javis.get_frames","text":"get_frames(frames::Rel, last_frames::UnitRange; is_action = false)\n\nReturn the frames based on a relative frames Rel object and the last_frames.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_frames-Tuple{Symbol,UnitRange}","page":"References","title":"Javis.get_frames","text":"get_frames(frames::Symbol, last_frames::UnitRange; is_action = false)\n\nGet the frames based on a symbol (currently only same) and the last_frames. Throw ArgumentError if symbol is unknown\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_frames-Tuple{Union{Javis.AbstractAction, Javis.AbstractObject}}","page":"References","title":"Javis.get_frames","text":"get_frames(a::Union{AbstractObject, AbstractAction}; is_action = false)\n\nReturn a.frames.frames which holds the computed frames for the AbstractObject or AbstractAction a.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_interpolation-Tuple{Javis.AbstractAction,Any}","page":"References","title":"Javis.get_interpolation","text":"get_interpolation(action::AbstractAction, frame)\n\nReturn the value of the action.anim Animation based on the relative frame given by get_interpolation(get_frames(action), frame)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_interpolation-Tuple{UnitRange,Any}","page":"References","title":"Javis.get_interpolation","text":"get_interpolation(frames::UnitRange, frame)\n\nReturn a value between 0 and 1 which represents the relative frame inside frames.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_javis_frame-Tuple{Any,Any,Any}","page":"References","title":"Javis.get_javis_frame","text":"get_javis_frame(video, objects, frame)\n\nGet a frame from an animation given a video object, its objects, and frame.\n\nArguments\n\nvideo::Video: The video which defines the dimensions of the output\nobjects::Vector{Object}: All objects that are performed\nframe::Int: Specific frame to be returned\n\nReturns\n\nArray{ARGB32, 2} - request frame as a matrix\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_scale-Tuple{Javis.AbstractObject}","page":"References","title":"Javis.get_scale","text":"get_scale(obj::AbstractObject)\n\nGet access to the scaling that got saved in a previous object.\n\nReturns\n\nScaling: the scale stored by a previous object.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.match_num_point!-Tuple{Array{Point,1},Array{Point,1}}","page":"References","title":"Javis.match_num_point!","text":"match_num_point!(poly_1::Vector{Point}, poly_2::Vector{Point})\n\nThis is a helper function for morph. Given two polygons poly_1 and poly_2 points are added to the polygon with less points until both polygons have the same number of points. The polygon with less points gets mutated during this process.\n\nArguments\n\npoly_1::Vector{Point}: The points which define the first polygon\npoly_2::Vector{Point}: The points which define the second polygon\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.path_move-Tuple{Any,Any}","page":"References","title":"Javis.path_move","text":"path_move(x,y)\n\nMoving to the specified point\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.path_quadratic-Tuple{Point,Any,Any,Any,Any}","page":"References","title":"Javis.path_quadratic","text":"path_quadratic(c_pt::Point, x,y, xe, ye)\n\nDrawing a quadratic bezier curve by computing a cubic one as that is supported by Luxor\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.pathsvg-Tuple{Any}","page":"References","title":"Javis.pathsvg","text":"pathsvg(svg)\n\nConvert an svg to a path using Luxor. Normally called via the latex command. It handles only a subset of the full power of svg.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.perform_transformation-Tuple{Javis.AbstractAction}","page":"References","title":"Javis.perform_transformation","text":"perform_transformation(action::AbstractAction)\n\nPerform the transformation as described in action.internal_transition\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.perform_transformation-Tuple{Javis.InternalRotation}","page":"References","title":"Javis.perform_transformation","text":"perform_transformation(trans::InternalRotation)\n\nTranslate and rotate as described in trans.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.perform_transformation-Tuple{Javis.InternalScaling}","page":"References","title":"Javis.perform_transformation","text":"perform_transformation(trans::InternalScaling)\n\nScale as described in trans.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.perform_transformation-Tuple{Javis.InternalTranslation}","page":"References","title":"Javis.perform_transformation","text":"perform_transformation(trans::InternalTranslation)\n\nTranslate as described in trans.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.save_morph_polygons!-Tuple{Video,Javis.AbstractObject,Int64,Function}","page":"References","title":"Javis.save_morph_polygons!","text":"save_morph_polygons!(object::AbstractObject, from_func::Function, to_func::Function)\n\nConverts the paths created by the functions to polygons and calls match_num_point! such that both polygons have the same number of points. This is done once inside _morph. Saves the two polygons inside object.opts[:from_poly] and object.opts[:to_poly].\n\nAssumption: Both functions create only a single polygon each.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.scl-Tuple{Any}","page":"References","title":"Javis.scl","text":"scl(x)\n\nscl is just a short-hand for get_scale\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_attr-Tuple{Val{:transform},Any}","page":"References","title":"Javis.set_attr","text":"set_attr(::Val{:transform}, transform_str)\n\nCall the corresponding set_transform method i.e matrix, scale and translate\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_attrs-Tuple{Any}","page":"References","title":"Javis.set_attrs","text":"set_attrs(o)\n\nSetting the attributes of the object o by calling set_attr methods.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_frames!-Tuple{Union{Javis.AbstractAction, Javis.AbstractObject},UnitRange}","page":"References","title":"Javis.set_frames!","text":"set_frames!(a::Union{AbstractObject, AbstractAction}, last_frames::UnitRange)\n\nCompute the frames based on a.frames and last_frames. Save the result in a.frames.frames which can be accessed via get_frames.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_object_defaults!-Tuple{Any}","page":"References","title":"Javis.set_object_defaults!","text":"set_object_defaults!(object)\n\nSet the default object values\n\nline_width and calls Luxor.setline.\nopacity and calls Luxor.opacity.\nscale and calls Luxor.scale.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_transform-Tuple{Val{:matrix},Vararg{Any,N} where N}","page":"References","title":"Javis.set_transform","text":"set_transform(::Val{:matrix}, args...)\n\nMultiply the new matrix with the current matrix and set it.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.update_ObjectSetting!-Tuple{Javis.ObjectSetting,Javis.ObjectSetting}","page":"References","title":"Javis.update_ObjectSetting!","text":"update_ObjectSetting!(as::ObjectSetting, by::ObjectSetting)\n\nSet the fields of as to the same as by. Basically copying them over.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/#**Information-about-Tutorials-Beginners-Start-Here!**","page":"Information about Tutorials - Beginners Start Here!","title":"Information about Tutorials - Beginners Start Here!","text":"","category":"section"},{"location":"tutorials/#Why-Tutorials?","page":"Information about Tutorials - Beginners Start Here!","title":"Why Tutorials?","text":"","category":"section"},{"location":"tutorials/","page":"Information about Tutorials - Beginners Start Here!","title":"Information about Tutorials - Beginners Start Here!","text":"These tutorials are provided to assist in your adventures in Javis.jl! Each one was made with care, quality, and a good sense of humor to facilitate a fun and educational experience. If you want to make a tutorial, we encourage you to read some of these tutorials to get a feel for how they are structured and written. After that, check out our contributing guidelines and open up an issue about what tutorial you want to add!","category":"page"},{"location":"tutorials/#List-of-Available-Tutorials","page":"Information about Tutorials - Beginners Start Here!","title":"List of Available Tutorials 📚","text":"","category":"section"},{"location":"tutorials/","page":"Information about Tutorials - Beginners Start Here!","title":"Information about Tutorials - Beginners Start Here!","text":"Here is a current list of our tutorials. Their level of difficulty starts from a beginner Javis user to advanced usages of Javis. Currently, these tutorials are available:","category":"page"},{"location":"tutorials/","page":"Information about Tutorials - Beginners Start Here!","title":"Information about Tutorials - Beginners Start Here!","text":"Tutorial 1: Making Your First Javis Animation! - a step by step guide to making your first animation with Javis.\nTutorial 2: What Are Actions? - an introduction to the most important part of Javis - the Action object.\nTutorial 3: Rendering LaTeX with Javis! - a simple tutorial on how to render LaTeX in Javis animations.\nTutorial 4: Do You Know Our Mascot? Learn about Transitions and SubActions! - a fun tutorial to make our mascot and learn about the SubAction and Transition type methods.\nTutorial 5: Taming the Elements - how to use Scaling to grow or shrink arbitrary objects and using Javis with other Julia packages.\nTutorial 6: Using Animations.jl to Create something with more Pep! - an advanced tutorial to make your animations more interesting.","category":"page"},{"location":"tutorials/","page":"Information about Tutorials - Beginners Start Here!","title":"Information about Tutorials - Beginners Start Here!","text":"If you spot an issue with any of these tutorials, please let us know! Thank you!","category":"page"},{"location":"contributing/#Contributing-to-Javis","page":"Contributing","title":"Contributing to Javis","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Javis is currently under heavy development as we push to a primary release version. As such, some parts of these instructions may become outdated faster than we can update them. If you encounter an error in these instructions, please open an issue and let us know. ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"We follow a workflow pattern that is directly inspired by the development workflow guide found in Plots.jl. The general workflow we expect contributors to adhere to is as follows:","category":"page"},{"location":"contributing/#.-Create-an-Issue-about-the-Problem","page":"Contributing","title":"1. Create an Issue about the Problem","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you want to add functionality or to work on a bug you found, open an issue first. That'll save you from doing work that we may not support for Javis.","category":"page"},{"location":"contributing/#.-Fork-the-repo-to-your-account","page":"Contributing","title":"2. Fork the repo to your account","text":"","category":"section"},{"location":"contributing/#.-Create-a-branch-based-on-what-you-are-developing","page":"Contributing","title":"3. Create a branch based on what you are developing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Before making a branch, make sure to check that you are even with master via the following commands:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"git fetch origin\ngit checkout master\ngit merge --ff-only origin/master","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The --ff-only flag will \"fast forward\" to newer commits. It will not create new merge commits.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"After your master branch is up to date, we follow the following naming conventions for branches:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"For issue fixes, name it like so:\ngit branch [your github username]-issue-[issue number]\n\nExample: tcp-issue-6\nFor features, name it like so:\ngit branch [your github username]-feature-[name of feature]\n\nExample: tcp-feature-scaling\nFor documentation, name it like so:\ngit branch [your github username]-documentation-[where improvement is made]\n\nExample: tcp-documentation-contributing-guidelines","category":"page"},{"location":"contributing/#.-Test,-code,-format,-and-commit","page":"Contributing","title":"4. Test, code, format, and commit","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Once you have a fork, it is useful to make sure the fork was successful. To verify that everything is operational, let's test it. The following procedure is as follows:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Go into the root of your fork:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"cd Javis","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Open your Julia REPL and type the following within the repo:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"julia> ]\n(@v###) pkg> dev .\n(@v###) pkg> test Javis","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"This might take some time, but if the installation on your computer is successful, it should say all tests passed.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"NOTE: You may need to remove the current version of Javis you have installed in your Julia environment in order to develop. ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"After making the changes you wanted to make, run the tests again to make sure you did not introduce any breaking changes. If everything passed, we can continue on to the next step. If not, it is the responsibility of the contributor to resolve any conflicts or failing tests. Don't worry! We're happy to help you resolve errors. 😄 If you are stuck, go ahead and continue with this tutorial.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Once you are done with your changes, you will need to install JuliaFormatter.jl to format your code before we make a PR. To do this, install JuliaFormatter.jl into your personal Julia installation by running:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"julia> ]\n(@v###) pkg> add JuliaFormatter","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"NOTE: Make sure that (@v###) pkg> does not say (Javis) pkg> or else you will accidentally install JuliaFormatter.jl into Javis.jl! To get out of the (Javis) pkg> environment, type into your REPL, julia> ] activate and that should put you back into your own environment.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Great! Now that you have JuliaFormatter.jl installed, run the following in your REPL:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"julia> using JuliaFormatter\njulia> format(\".\")","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"NOTE: Make sure when you run format, you are at the top of the Javis directory so that every file gets properly formatted.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Now that formatting is done, let's push your changes to GitHub! The way we do this is in three steps:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Add the files you have added or changed via git add \nAfter adding the files, we need to say what you did to the files (i.e. commit the files). This can be accomplished thusly: git commit -m \"your message\" \nFinally, let's push these changes to GitHub using git push --set-upstream origin [name of the branch you made]","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"An example would be this: Say if I make a branch called tcp-documentation-22 after a discussion about changing documentation in issue 22.  From that file, I changed README.md to add about how cool I think penguins are. I would do the following:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"git add README.md\ngit commit -m \"Added discussion about penguins\"\ngit push --set-upstream origin tcp-documentation-22","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If I have already pushed in the past and set the upstream to origin, then I could do git push instead of git push --set-upstream origin tcp-documentation-22.","category":"page"},{"location":"contributing/#.-Submitting-your-changes-to-the-main-project","page":"Contributing","title":"5. Submitting your changes to the main project","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Almost done! Go to your fork and there should be a section that asks you to make a pull request (PR) from your branch. This allows the maintainers of Javis to see if they can add your changes to the main project. If not, you can click the \"New pull request\" button.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Make sure the \"base\" branch is Javis master and the \"compare\" branch is the branch you just made.  To your PR, add an informative title and description, and link your PR to relevant issues or discussions.  Finally, click \"Create pull request\". ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"You may get some questions about it, and possibly suggestions of how to make it ready to go into the main project.  If you had test errors or problems, we are happy to help you.  Then, if all goes according to plan, it gets merged... Thanks for the contribution!! 🎉 🎉 🎉","category":"page"},{"location":"contributing/#Note-on-Adding-Dependencies","page":"Contributing","title":"Note on Adding Dependencies","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"As a rule, we try to avoid having too many dependencies. Therefore, we request that if you have a PR that adds a new dependency, please have opened an issue previously.","category":"page"},{"location":"contributing/#Adding-Core-Dependencies","page":"Contributing","title":"Adding Core Dependencies","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you are working on introducing a new core dependency, make sure to add that dependency to the main Project.toml for Javis. To do this, follow these steps:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Enter the root of the Javis directory ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"cd /path/to/Javis.jl","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Activate the Javis environment and add the dependency:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"julia> ]\n(@v###) pkg> activate .\n(Javis) pkg> add [NAME OF DEPENDENCY]","category":"page"},{"location":"contributing/#Adding-Test-Dependencies","page":"Contributing","title":"Adding Test Dependencies","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you are  introducing a new test dependency, make sure to add that dependency to the Project.toml located in the Javis test directory. To do this, follow these steps:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Enter the test directory inside of the Javis directory ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"cd /path/to/Javis.jl/test/","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Activate the Javis environment and add the dependency:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"julia> ]\n(@v###) pkg> activate .\n(test) pkg> add [NAME OF DEPENDENCY]","category":"page"},{"location":"howto/#How-To?","page":"HowTo","title":"How To?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"This is a list of frequently ask questions answering basic \"How to do X, Y, Z?\" questions.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"For all the questions below you need to start with:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"using Javis\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nvideo = Video(500, 500)\n\njavis(video, [\n    BackgroundAction(1:100, ground),\n    SNIPPETS_GO_HERE # Replace this line with the provided snippet!\n]; pathname=\"how_to.gif\")","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Each of the code snippets should replace the variable SNIPPETS_GO_HERE.","category":"page"},{"location":"howto/#How-can-I-move-a-circle-from-A-to-B?","page":"HowTo","title":"How can I move a circle from A to B?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"First of all you need to define an Action which draws a circle.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Action(1:100, (args...)->circle(O, 50, :fill))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"and then you need the Translation command to move the circle.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Action(1:100, (args...)->circle(O, 50, :fill), Translation(O, Point(100, 100)))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"The circle then moves from the origin (center of frame) 100 px down and to the right.","category":"page"},{"location":"howto/#How-can-I-define-frames?","page":"HowTo","title":"How can I define frames?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"There are currently three different ways to define frames inside Javis. The simplest one is to define the UnitRange like 1:100 as above such that the action is called for every frame from 1 to 100.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Examples:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Action(1:100, (args...)->circle(O, 50, :fill)),\nAction(1:50, (args...)->circle(O, 70, :stroke))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"It is relatively often the case that the following action should work with the same frames as the previous action this can be done with.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Examples:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Action(1:100, (args...)->circle(O, 50, :fill)),\nAction(:same, (args...)->circle(Point(100, 100), 20, :stroke)),\nAction((args...)->circle(Point(-100, 100), 20, :stroke))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"so either use the symbol :same or just don't mention frames.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"The last option is to define frames relative to the previous frame. More precisely the end of the last frame.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Examples:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Action(1:50, (args...)->circle(O, 50, :fill)),\nAction(Rel(1:50), (args...)->circle(Point(100, 100), 20, :stroke)),","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"This is the same as:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Action(1:50, (args...)->circle(O, 50, :fill)),\nAction(51:100, (args...)->circle(Point(100, 100), 20, :stroke)),","category":"page"},{"location":"howto/#How-can-I-make-an-object-fade-in-from-the-background?","page":"HowTo","title":"How can I make an object fade in from the background?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Let's make the standard circle we used before appear from the background.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Action(1:100, (args...)->circle(O, 50, :fill); subactions=[\n    SubAction(1:50, appear(:fade))\n]),","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"this is using a change in opacity to show the circle.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"There are two other options :scale and :fade_line_width. :scale also works for every kind of Action whereas :fade_line_width only works if you only draw the stroke instead of using fill.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Example:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Action(1:100, (args...)->circle(O, 50, :stroke); subactions=[\n    SubAction(1:50, appear(:fade_line_width))\n]),","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Additionally you can use all of these three options for the disappear functionality.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"NOTE: A SubAction gets also called for frames after the last specified subaction frame such that disappeared objects stay disappeared.","category":"page"},{"location":"howto/#How-can-I-move-one-object-based-on-another-object?","page":"HowTo","title":"How can I move one object based on another object?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"In this case we need to define our own circ function which draws the circle and returns the center point of the circle.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"function circ(point, radius, action)\n    circle(point, radius, action)\n    return point\nend","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Now we define two actions:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Drawing a circle and saving the position inside :my_circle\nDrawing a rectangle above the circle","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Action(1:100, :my_circle, (args...)->circ(O, 50, :stroke), Translation(Point(100,100))),\nAction(1:100, (args...)->rect(pos(:my_circle)+Point(-10, -100), 20, 20, :fill))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"In this animation the position of the circle is saved inside :my_circle and can be used with pos(:my_circle) inside the rect function.","category":"page"},{"location":"howto/#How-can-I-show-a-text-being-drawn?","page":"HowTo","title":"How can I show a text being drawn?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"A text or latex rendering can appear as any other object with appear(:fade) and appear(:scale), However, it also has a special appear functionality called  :draw_text.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"You can use ","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Action(\n    1:100,\n    (args...) -> text(\"Hello World!\"; halign = :center);\n    subactions = [\n        SubAction(1:15, sineio(), appear(:draw_text)),\n        SubAction(76:100, sineio(), disappear(:draw_text)),\n    ]\n)","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"to let the text \"Hello World!\" appear from left to right in an animated way. ","category":"page"},{"location":"howto/#How-can-I-have-an-object-follow-a-path?","page":"HowTo","title":"How can I have an object follow a path?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"We need to create a path by providing a list of points that the object can follow. All objects that return a list of points can be used directly like star and poly for others a list of points must be provided as the input.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"An action can look like this:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Action(\n    1:150\n    (args...) -> star(O, 20, 5, 0.5, 0, :fill);\n    subactions = [\n        SubAction(1:150, follow_path(star(O, 300))),\n    ],\n)","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"in this case a star is following the path of a bigger star. ","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"NOTE: the star inside follow_path should have the action=:none which is the default for most Luxor functions.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"NOTE: Unfortunately the above currently only works for some Luxor functions like ngon and star but not for circle and rect as they return true instead of the points.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"In that case you need to define a function like:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"function ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction luxor2poly(func::Function)\n    newpath()\n    func()\n    closepath()\n    return pathtopoly()[1]\nend\n\nvideo = Video(600, 400)\njavis(video, [\n    BackgroundAction(1:150, ground),\n    Action(\n        1:150,\n        (args...) -> star(O, 20, 5, 0.5, 0, :fill);\n        subactions = [\n            SubAction(1:150, follow_path(luxor2poly(()->rect(O, 100, 100, :path))))\n        ]\n    )\n]; pathname=\"follow_path.gif\")","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Another possibility is to specify a vector of points like this:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Action(\n    1:150\n    (args...) -> star(O, 20, 5, 0.5, 0, :fill);\n    subactions = [\n        SubAction(1:150, sineio(), follow_path([Point(100, 200), Point(-20, -250), Point(-80, -10)]; closed=false)),\n    ],\n)","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"In this case I want the star to follow a path consisting of two edges and I use ; closed=false to specify that it's just two edges and not a closed triangle.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"An interesting possibility is to define paths using Bézier curves which can be defined with Luxor see: Polygons to Bézier paths and back again","category":"page"},{"location":"howto/#How-can-I-see-a-live-view-of-the-animation?","page":"HowTo","title":"How can I see a live view of the animation?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"A live view of the animation can be useful for creating an animation where one doesn't need the overhead of building a gif or mp4 all the time. It also has the advantage that it's very easy to jump to a specific frame.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"The live viewer can be called with adding ; liveview=true to the javis call.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"NOTE: If liveview=true the tempdirectory and pathname arguments are ignored.","category":"page"},{"location":"tutorials/tutorial_6/#**Tutorial-6:**-Using-Animations.jl-to-Create-something-with-more-Pep!","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"In the last couple of tutorials you've learned the basics of Javis and some of the more advanced stuff like SubAction.","category":"page"},{"location":"tutorials/tutorial_6/#Our-goal","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Our goal","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"The goal of this tutorial is to explain a new feature we have added in v0.2 of Javis. Before this every animation was basically linear. What I mean by this is: If you move an object from A to B using Translation it would do so in a linear and therefore boring fashion.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"We'll create an interesting loading animation for this. It consists of five circles which move from the center to the outside rotate around the center and back to the origin. During this process they appear and disappear as well as changing color.","category":"page"},{"location":"tutorials/tutorial_6/#Learning-Outcomes","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Learning Outcomes","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"This tutorial shows some more power of subactions that we introduced in v0.2. Combined with the power of the awesome library Animations.jl you have very fine grained control over the objects you animate and understand the ease of its easing functions. 😄","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"Today you'll learn how to","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"use easing functions to have animations with pep\nhave full control over the animation of objects\ncreate a beautiful (if I can say so myself) loading animation","category":"page"},{"location":"tutorials/tutorial_6/#Moving-with-Different-Speed","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Moving with Different Speed","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"The main point of this tutorial is to explain how to basically \"interact\" with objects with a non-linear speed. Our first step will be to rotate a circle around the origin at a increasing and then decreasing speed. ","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"Let's start with the boring linear animation:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"using Javis\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nvideo = Video(600, 400)\n\nactions = [\n    Action(\n        (args...) -> circle(Point(150, 0), 20, :fill);\n        subactions = [\n            SubAction(Rotation(0.0, 2π)),\n        ],\n    )\n]\n\njavis(\n    video,\n    [BackgroundAction(1:200, ground), actions...],\n    pathname = \"loading.gif\",\n)","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"(Image: Linear movement)","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"I would say that this looks a bit dull. Let us rotate it with varying speeds. For this I'll use the sineio easing function. You can try another easing function. They are all described here. Easing functions basically describe how to interpolate between the values. If one goes from 0 to 5 in the time range of 0 to 1. It can be at 2.5 at t=0.5 or it can start slowly and speed up until it reaches the final value of 5 such that at t=0.5 it is only at let say 1.5.  This way one can describe the speed/acceleration of the object.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"First of all we need Animations for this and I also load Colors here for later.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"These can be installed via ] add Animations, Colors inside the REPL.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"Animations.jl defines easing functions such that we can have non-linear movement\nColors.jl defines colors and gives access to different color spaces such that we can transition from a color to another by using Animations.jl.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"using Javis, Animations, Colors\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nrotate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [0, 2π],\n    [sineio()],\n)\n\nvideo = Video(600, 400)\n\nactions = [\n    Action(\n        (args...) -> circle(Point(150, 0), 20, :fill);\n        subactions = [\n            SubAction(rotate_anim, rotate()),\n        ],\n    )\n]\n\njavis(\n    video,\n    [BackgroundAction(1:200, ground), actions...],\n    pathname = \"loading.gif\",\n)","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"(Image: Rotation with varying speed)","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"I think that looks more interesting. The Animations.jl package is very powerful so you might wanna head over to their documentation and try different things.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"Nevertheless, let me explain this part a bit and you can check out the documentation for more details.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"rotate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [0, 2π],\n    [sineio()],\n)","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"The Animation function takes in three arguments which are all vectors. ","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"Describe the time stamps. They should always go from 0 to 1 inside Javis.\nThe values at the different time stamps. Here we start at 0 radians and end with 2π radians.\nThe easing functions describe how to move from one value to the next. It must be always one less than the number of time stamps/values","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"We can actually have a look at this in a graphical plot:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"using Animations\nusing Plots\n\nrotate_anim = Animations.Animation(\n    [0, 1], # must go from 0 to 1\n    [0, 2π],\n    [sineio()],\n)\n\nts = 0:0.01:1\nys = at.(rotate_anim, ts)\n\nplot(ts, ys; labels=false, xaxis=\"t\", yaxis=\"value\")","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"(Image: Sineio plot)","category":"page"},{"location":"tutorials/tutorial_6/#Precise-Movement","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Precise Movement","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"Okay we now know how to rotate with a different speed but let's do what we actually wanted. Moving out from the center, rotate and then move back to the center. The code gets a bit longer from time to time so I'll only add changes from now on in the following way. If I add something called _anim you can put it directly after rotate_anim. I'll otherwise only change the actions array.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"Our new animations:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"One translating from the origin to the right ","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"translate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [O, Point(150, 0)],\n    [sineio()],\n)","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"and one translating back. One needs to make sure that it always starts at the origin (the current origin of the already translated view) to not introduce a break in the animation. More about that later.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"translate_back_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [O, Point(-150, 0)],\n    [sineio()],\n)","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"and our actions (yes it's still a single Action but we add more soon)","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"actions = [\n    Action(\n        (args...) -> circle(O, 20, :fill);\n        subactions = [\n            SubAction(1:50, translate_anim, translate()),\n            SubAction(51:150, rotate_anim, rotate_around(Point(-150, 0))),\n            SubAction(151:200, translate_back_anim, translate()),\n        ],\n    )\n]","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"I changed the starting position of the circle to O and we now have three subactions.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"Let's walk through the steps Javis takes to create the animation:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"For the first 50 frames of the action the circle is translated from O to (150, 0) so just to the right. \nRemember the O is the same as (0, 0) and is at the center of the canvas at the beginning.\nThen the circle is at position (150, 0). Remember that it is still drawn at the origin so actually we shifted our whole view to the right.\nTherefore for the next 100 frames we need to specify that we actually want to rotate around the world origin which is at Point(-150, 0) from our current perspective. \nAfterwards we are now again at (150, 0) but see it as our origin and therefore need to move our circle to the left to Point(-150, 0) which is the world origin. ","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"Hope that makes sense! Let's see it in action:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"(Image: The loading movement)","category":"page"},{"location":"tutorials/tutorial_6/#Adding-more-Blobs!","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Adding more Blobs!","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"The blob does start to feel lonely a bit so let's give him some friends. They should all do the same movement but start at different times.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"actions = [\n    Action(\n        frame_start:frame_start+149,\n        (args...) -> circle(O, 20, :fill);\n        subactions = [\n            SubAction(1:30, translate_anim, translate()),\n            SubAction(31:120, rotate_anim, rotate_around(Point(-150, 0))),\n            SubAction(121:150, translate_back_anim, translate()),\n        ],\n    ) for frame_start in 1:10:50\n]","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"I've basically added four more blobs by using for frame_start in 1:10:50 inside the array definition. It's a basic list comprehension which might be hard to get at first as it's spreading over several lines. ","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"Then I defined the start of the Action with: frame_start:frame_start+149 such that every blob is there for 150 frames and reduced the number of frames in the subactions a bit to have 150 frames.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"(Image: The loading movement with some friends)","category":"page"},{"location":"tutorials/tutorial_6/#How-about-Color?","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"How about Color?","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"Okay everything is dull when we only use white and black. Let's make it such that our blobs change color from red over cyan to black which also make them disappear.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"color_anim = Animation(\n    [0, 0.5, 1], # must go from 0 to 1\n    [Lab(colorant\"red\"), Lab(colorant\"cyan\"), Lab(colorant\"black\")],\n    [sineio(), sineio()],\n)","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"This time we actually have not only a start and end point of our animation but a point in between. We therefore have three timestamps 0.0 , 0.5 and 1.0. Our three colors red, cyan and black. You can play with different colors and color spaces if you want.  And we need two easing functions: One defines the movement from red to cyan and the second from cyan to black.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"actions = [\n    Action(\n        frame_start:frame_start+149,\n        (args...) -> circle(O, 20, :fill);\n        subactions = [\n            SubAction(1:30, translate_anim, translate()),\n            SubAction(31:120, rotate_anim, rotate_around(Point(-150, 0))),\n            SubAction(121:150, translate_back_anim, translate()),\n            SubAction(1:150, color_anim, sethue()),\n        ],\n    ) for frame_start in 1:10:50\n]","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"The change in color is over the entire action in this case.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"(Image: Loading with color)","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"I think that already looks quite nice. The appearance of the blobs is a bit off though. How about fading them in by scaling them up?","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"actions = [\n    Action(\n        frame_start:frame_start+149,\n        (args...) -> circle(O, 20, :fill);\n        subactions = [\n            SubAction(1:10, sineio(), appear(:scale)),\n            SubAction(11:40, translate_anim, translate()),\n            SubAction(41:120, rotate_anim, rotate_around(Point(-150, 0))),\n            SubAction(121:150, translate_back_anim, translate()),\n            SubAction(1:150, color_anim, sethue()),\n        ],\n    ) for frame_start in 1:10:50\n]","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"A deeper look into the line we added?","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"SubAction(1:10, sineio(), appear(:scale)),","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"If we want to animate from 0 to 1 we don't need to write an Animation object for this and can simply specify the easing function.  Additionally we use the appear(:scale) which does the same thing as:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"SubAction(1:10, sineio(), scale()),","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"but it might be easier to read when we attach the meaning of appear to it.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"Maybe have a look at appear and disappear.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"(Image: The loading animation)","category":"page"},{"location":"tutorials/tutorial_6/#Conclusion","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"To recap, by working through this animation you should now:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"Understand how to make objects move in a non-linear way using Animations.jl\nBe able to scale, translate, rotate objects in a finer control\nHave fun with colors!","category":"page"},{"location":"tutorials/tutorial_6/#The-Code","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"The Code","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"using Javis, Animations, Colors\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nrotate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [0, 2π],\n    [sineio()],\n)\n\ntranslate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [O, Point(150, 0)],\n    [sineio()],\n)\n\ntranslate_back_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [O, Point(-150, 0)],\n    [sineio()],\n)\n\ncolor_anim = Animation(\n    [0, 0.5, 1], # must go from 0 to 1\n    [Lab(colorant\"red\"), Lab(colorant\"cyan\"), Lab(colorant\"black\")],\n    [sineio(), sineio()],\n)\n\nvideo = Video(600, 400)\n\nactions = [\n    Action(\n        frame_start:frame_start+149,\n        (args...) -> circle(O, 20, :fill);\n        subactions = [\n            SubAction(1:10, sineio(), appear(:scale)),\n            SubAction(11:40, translate_anim, translate()),\n            SubAction(41:120, rotate_anim, rotate_around(Point(-150, 0))),\n            SubAction(121:150, translate_back_anim, translate()),\n            SubAction(1:150, color_anim, sethue()),\n        ],\n    ) for frame_start in 1:10:50\n]\n\njavis(\n    video,\n    [BackgroundAction(1:200, ground), actions...],\n    pathname = \"loading.gif\",\n)","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Using Animations.jl to Create something with more Pep!","title":"Tutorial 6: Using Animations.jl to Create something with more Pep!","text":"Author(s): Ole Kröger \nDate: September 10th, 2020 \nTag(s): loading, subactions, Animations.jl","category":"page"},{"location":"tutorials/tutorial_2/#**Tutorial-2:**-What-Are-Actions?","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"In this tutorial, we are going to learn how to make a brain! 🧠  Well, not exactly making a brain.  Instead, we are going to animate brain activity by simulating a 10-20 EEG Electrode Array using random data.  This Project Tutorial builds on prior tutorials and serves as a cumulative test of your understanding about Javis.","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"When you are done with this tutorial, you will have created the following animation:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/#Learning-Outcomes","page":"Tutorial 2: What Are Actions?","title":"Learning Outcomes","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"From this project tutorial you will:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Clearly understand how to use Actions to create an animation\nBe able to create more complex animations\nDisplay meaningful information on your animations","category":"page"},{"location":"tutorials/tutorial_2/#Setting-Up-Our-Animation","page":"Tutorial 2: What Are Actions?","title":"Setting Up Our Animation","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"As demonstrated in prior tutorials, we will use Javis to create a Video object:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"using Javis\n\nvideo = Video(500, 500)","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Let's define our background function to create the backdrop of our frames:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"function ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"If we were to execute the javis command now, this is what would appear as an output of the following execution:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"video = Video(500, 500)\njavis(video, [BackgroundAction(1:30, ground)], pathname = \"eeg.gif\", framerate = 1)","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"As you can see, we have generated a blank gif. Not exactly what we want but it is a start! We used a special type of action called BackgroundAction. This applies whatever function that is provided to it as the default background of any future animations produced by a future action.","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"NOTE: For this animation, we will be using a framerate of 1 frame per second. Thus, why framerate is set to the value of 1 in javis.","category":"page"},{"location":"tutorials/tutorial_2/#Getting-A-*head*","page":"Tutorial 2: What Are Actions?","title":"Getting A - head","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Now that we have created our default background via the BackgroundAction, let's move onto making the head that we will attach our electrodes to!","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"First, we define an additional function that allows us to draw a circle. This will be used extensively later:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"function circ(p = O, color = \"black\", action = :fill, radius = 25, edge = \"solid\")\n    sethue(color)\n    setdash(edge)\n    circle(p, radius, action)\nend","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"We can now do the exciting part – using an Action! Actions are at the very heart of the entire Javis library and are the foundational building blocks to make animations. Actions are what is used to draw objects on a frame, animate objects, or change objects altogether!","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Using the circ function we defined, we can execute an Action inside of the javis function to draw a head. The following invocation will create the head:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"...\n    Action(:same, :head, (args...) -> circ(O, \"black\", :stroke, 170)),\n...","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Action objects consist of at least one part, namely calling a function which draws something on to the canvas.  Action objects are fully comprised of Frames (which can be optional), an optional id::Symbol, a drawing function func, an optional Animation, an optional Movement, and optional SubAction definitions.","category":"page"},{"location":"tutorials/tutorial_2/#Frames","page":"Tutorial 2: What Are Actions?","title":"Frames","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"The default of an Action is to use the same frames as a previous Action.  Besides that there are three other options:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Define the range explicitly i.e 1:100.\nUse the default or explicitly write :same into the unit range location which means the same frames as before\nUse Rel to specify it relative to the previous frame\nRel(10) which is short for Rel(1:10) after an Action which is defined for 1:100 would mean 101:110.\nYou just want to make sure that you don't use frame numbers higher than the BackgroundAction.","category":"page"},{"location":"tutorials/tutorial_2/#Action-ID","page":"Tutorial 2: What Are Actions?","title":"Action ID","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"The action id which in the above example is :head can be used to store a return value from the drawing function you call.  This can be used in later actions such that two actions can interact. One example was shown in the previous tutorial where one object rotated around another one. In this tutorial it's basically used as a comment to keep track of what each Action is creating.","category":"page"},{"location":"tutorials/tutorial_2/#Function","page":"Tutorial 2: What Are Actions?","title":"Function","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"The most important part of each Action is the drawing function func that defines what should be drawn in these frames.  Under the hood, Javis calls func with three arguments (video, action, and framenumber) but you do not need to preoccupy yourself with these. Just make func an anonymous function and define the output being drawn in the canvas:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(args...) -> my_drawing_function(my_drawing_arguments...)","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(The args... don't even need to be part of the output!)","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"In Tutorial 1, we saw that my_drawing_function could either be a Luxor function or a function which calls some Luxor functions to draw on the canvas. ","category":"page"},{"location":"tutorials/tutorial_2/#Animation","page":"Tutorial 2: What Are Actions?","title":"Animation","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"An Action can be used to define a simple movement of what can be drawn.  An example for this was shown in the previous tutorial where objects rotate.  This movement is normally linear which is rather dull.  Therefore, it's possible to define the speed using so called easing functions (for more info, see Tutorial 6.","category":"page"},{"location":"tutorials/tutorial_2/#Movement","page":"Tutorial 2: What Are Actions?","title":"Movement","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"It's possible to give an Action, a movement that persists over the entirety of its frames. This can be done using Translation, Rotation and Scaling.  However, it is suggested, and for more complex movements required, to use SubActions to steer the animation of an Action. ","category":"page"},{"location":"tutorials/tutorial_2/#SubAction","page":"Tutorial 2: What Are Actions?","title":"SubAction","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Actions have one more additional keyword argument called subactions. A SubAction is used to have fine grained control of how an objects can move  from frame to frame.  Tutorial 4 and tutorial 6 explain more about a SubAction.","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Now that those explanations are out of the way, back to the brain! ","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"The code","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"...\n    Action(:same, :head, (args...) -> circ(O, \"black\", :stroke, 170)),\n...","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"creates","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Now we are getting a - head! 😃","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"NOTE: The ellipses, ..., in the code block to produce the head represents putting the action inside of the javis function. So, the above block actually turns out to look like this:javis(video, [\n    Action(:same, :head, (args...) -> circ(O, \"black\", :stroke, 170))],\n    pathname = \"eeg.gif\", framerate = 1)","category":"page"},{"location":"tutorials/tutorial_2/#Placing-the-Electrodes","page":"Tutorial 2: What Are Actions?","title":"Placing the Electrodes","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"To draw our electrodes, it would be useful to have a frame of reference for where the electrodes are supposed to go. Let's draw some axes for our electrode locations!","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"We will need to define a new function that allows us to draw lines. This is accomplished by the following function definition:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"function draw_line(p1 = O, p2 = O, color = \"black\", action = :stroke, edge = \"solid\")\n    sethue(color)\n    setdash(edge)\n    line(p1, p2, action)\nend","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Now, we can add in some grid lines for our electrode array.  The following code places a vertical and horizontal axis as well as an inscribed circle to represent polar placement of the electrodes:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"...\n        Action(\n            :same,\n            :inside_circle,\n            (args...) -> circ(O, \"black\", :stroke, 140, \"longdashed\"),\n        ),\n        Action(\n            :same,\n            :vert_line,\n            (args...) ->\n                draw_line(Point(0, -170), Point(0, 170), \"black\", :stroke, \"longdashed\"),\n        ),\n        Action(\n            :same,\n            :horiz_line,\n            (args...) ->\n\t\tdraw_line(Point(-170, 0), Point(170, 0), \"black\", :stroke, \"longdashed\")),\n...","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Great! Now that we have the gridlines, let's add in our electrode!","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"NOTE: If you noticed, we used Symbols to mark each Action. id's can actually be used to store the returns of a function called via an Action. This functionality was introduced in Tutorial 1 and will be further explored in future tutorials. An alternative syntax that is valid is to leave out the id and instead use a comment to mark what Action does what. ","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"We have to define our own function to create an electrode. The following code accomplishes this goal:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"function electrode(\n    p = O,\n    fill_color = \"white\",\n    outline_color = \"black\",\n    action = :fill,\n    radius = 25,\n    circ_text = \"\",\n)\n    sethue(fill_color)\n    circle(p, radius, :fill)\n    sethue(outline_color)\n    circle(p, radius, :stroke)\n    text(circ_text, p, valign = :middle, halign = :center)\nend","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Essentially, all the electrode function does is draws two circles on top of each other. One circle creates a white circle for the backdrop of text provided to it and the other circle provides a black outline. ","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"From there, we need to position our electrodes! I already went through and created two lists: ","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"electrode_locations is a list of Point objects that defines where an electrode should be placed.\nelectrode_names are the names of each electrode.","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Go ahead and copy this to save yourself the time to place these perfectly. I already did this for you - aren't I great? 😉","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"electrode_locations = [\n    O,\n    Point(-70, 0),\n    Point(70, 0),\n    Point(-140, 0),\n    Point(140, 0),\n    Point(0, 70),\n    Point(-50, 70),\n    Point(50, 70),\n    Point(0, -70),\n    Point(-50, -70),\n    Point(50, -70),\n    Point(115, -80),\n    Point(-115, -80),\n    Point(115, 80),\n    Point(-115, 80),\n    Point(40, -135),\n    Point(-40, -135),\n    Point(-190, -10),\n    Point(190, -10),\n    Point(-40, 135),\n    Point(40, 135),\n]\n\n\nelectrode_names = [\n    \"Cz\",\n    \"C3\",\n    \"C4\",\n    \"T3\",\n    \"T4\",\n    \"Pz\",\n    \"P3\",\n    \"P4\",\n    \"Fz\",\n    \"F3\",\n    \"F4\",\n    \"F8\",\n    \"F7\",\n    \"T6\",\n    \"T5\",\n    \"Fp2\",\n    \"Fp1\",\n    \"A1\",\n    \"A2\",\n    \"O1\",\n    \"O2\",\n]","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Finally, we can broadcast these points and names to our previously defined electrode function. Also, we need to define the radius of our electrodes; we will set that to 15:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"...\n    radius = 15 # needs to be defined before calling `javis`\n\tAction(\n            :electrodes,\n            (args...) ->\n                electrode.(\n                    electrode_locations,\n                    \"white\",\n                    \"black\",\n                    :fill,\n                    radius,\n                    electrode_names,\n                ),\n        ),\n...","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Now, executing this code block with our previously defined functions, we get this output:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/#\"If-Only-I-Had-a-Brain...\"","page":"Tutorial 2: What Are Actions?","title":"\"If Only I Had a Brain...\" 🎵","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"I think this is starting to come together quite nicely! It would appear that our subject however has no brain activity - quite alarming! 😱 Like the scarecrow from the film, The Wizard of Oz, let's give him a brain!","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"To simulate brain activity, we are going to add one more package from Julia base. This package is the Random package and it needs to be added like such:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"using Javis\nusing Random","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"From there, we need to define colors to represent no, low, medium, and high brain activity. Feel free to change up the colors! I chose these colors that need to be added to your code:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"indicators = [\"tomato\", \"darkolivegreen1\", \"gold1\", \"white\"]","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"From there, we also need to change the code block that defined the electrode locations. The previous electrode code looked like this","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"...\n        Action(\n            :electrodes,\n            (args...) ->\n                electrode.(\n                    electrode_locations,\n                    \"white\",\n                    \"black\",\n                    :fill,\n                    radius,\n                    electrode_names,\n                ),\n        ),\n...","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"However, what we now need to change is \"white\" to rand(indicators, length(electrode_locations)) for each electrode. The rand function allows proper broadcasting such that a new color is chosen for each electrode between frames. Without having the length(electrode_locations) random colors would be generated but only for the first frame. The next frame would then keep these colors for the rest of the animation.","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"An example resulting electrode configuration with random colors looks like this:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"...\n        Action(\n            :electrodes,\n            (args...) ->\n                electrode.(\n                    electrode_locations,\n                    rand(indicators, length(electrode_locations)),\n                    \"black\",\n                    :fill,\n                    radius,\n                    electrode_names,\n                ),\n        ),\n...","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Once all these modifications were made, execute your EEG and you should get something that looks like this:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"IT'S ALIVE!!! 🔬 We could finish this now, but let's add just a little bit more polish to it.","category":"page"},{"location":"tutorials/tutorial_2/#As-You-Can-See-Here...","page":"Tutorial 2: What Are Actions?","title":"As You Can See Here...","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Let's add some information to our animation.  We can create an info box using the following function:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"function info_box(video, action, frame)\n    fontsize(12)\n    box(140, -210, 170, 40, :stroke)\n    text(\"10-20 EEG Array Readings\", 140, -220, valign = :middle, halign = :center)\n    text(\"t = $(frame)s\", 140, -200, valign = :middle, halign = :center)\nend","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"It's invocation in the code looks like this:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"...\nAction(:same, :info, info_box),\n...","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"NOTE: The function for info_box is a little different! Each Action inside of the javis function automatically receives three objects being a Video object, which was previously defined outside of the javis function, the Action object, and the current frame number. ","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Once everything is executed, we get this very nice and clean looking animation which shows what this animation is and when parts of the brain are activated:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/#Conclusion","page":"Tutorial 2: What Are Actions?","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Congratulations! 🎉 🎉 🎉  You made a brain!  To recap, by working through this animation you should now:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Clearly understand how to use an Action \nBe able to create your own Action\nKnow how to approach complex animations\nMake meaningful information displayed easily on your animations","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Great job leveling up your Javis skills! 💪","category":"page"},{"location":"tutorials/tutorial_2/#Full-Code","page":"Tutorial 2: What Are Actions?","title":"Full Code","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"In case you ran into any issues or confusion, here is the full code:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"using Javis\nusing Random\n\nfunction ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction draw_line(p1 = O, p2 = O, color = \"black\", action = :stroke, edge = \"solid\")\n    sethue(color)\n    setdash(edge)\n    line(p1, p2, action)\nend\n\nfunction circ(p = O, color = \"black\", action = :fill, radius = 25, edge = \"solid\")\n    sethue(color)\n    setdash(edge)\n    circle(p, radius, action)\nend\n\nfunction info_box(video, action, frame)\n    fontsize(12)\n    box(140, -210, 170, 40, :stroke)\n    text(\"10-20 EEG Array Readings\", 140, -220, valign = :middle, halign = :center)\n    text(\"t = $(frame)s\", 140, -200, valign = :middle, halign = :center)\nend\n\nfunction electrode(\n    p = O,\n    fill_color = \"white\",\n    outline_color = \"black\",\n    action = :fill,\n    radius = 25,\n    circ_text = \"\",\n)\n    sethue(fill_color)\n    circle(p, radius, :fill)\n    sethue(outline_color)\n    circle(p, radius, :stroke)\n    text(circ_text, p, valign = :middle, halign = :center)\nend\n\nelectrode_locations = [\n    O,\n    Point(-70, 0),\n    Point(70, 0),\n    Point(-140, 0),\n    Point(140, 0),\n    Point(0, 70),\n    Point(-50, 70),\n    Point(50, 70),\n    Point(0, -70),\n    Point(-50, -70),\n    Point(50, -70),\n    Point(115, -80),\n    Point(-115, -80),\n    Point(115, 80),\n    Point(-115, 80),\n    Point(40, -135),\n    Point(-40, -135),\n    Point(-190, -10),\n    Point(190, -10),\n    Point(-40, 135),\n    Point(40, 135),\n]\n\nelectrode_names = [\n    \"Cz\",\n    \"C3\",\n    \"C4\",\n    \"T3\",\n    \"T4\",\n    \"Pz\",\n    \"P3\",\n    \"P4\",\n    \"Fz\",\n    \"F3\",\n    \"F4\",\n    \"F8\",\n    \"F7\",\n    \"T6\",\n    \"T5\",\n    \"Fp2\",\n    \"Fp1\",\n    \"A1\",\n    \"A2\",\n    \"O1\",\n    \"O2\",\n]\n\nradius = 15\nindicators = [\"tomato\", \"darkolivegreen1\", \"gold1\", \"white\"]\ndemo = Video(500, 500)\njavis(\n    demo,\n    [\n        BackgroundAction(1:10, ground),\n        Action(\n            :inside_circle,\n            (args...) -> circ(O, \"black\", :stroke, 140, \"longdashed\"),\n        ),\n        Action(:head, (args...) -> circ(O, \"black\", :stroke, 170)),\n        Action(\n            :vert_line,\n            (args...) ->\n                draw_line(Point(0, -170), Point(0, 170), \"black\", :stroke, \"longdashed\"),\n        ),\n        Action(\n            :horiz_line,\n            (args...) ->\n                draw_line(Point(-170, 0), Point(170, 0), \"black\", :stroke, \"longdashed\"),\n        ),\n        Action(\n            :electrodes,\n            (args...) ->\n                electrode.(\n                    electrode_locations,\n                    rand(indicators, length(electrode_locations)),\n                    \"black\",\n                    :fill,\n                    radius,\n                    electrode_names,\n                ),\n        ),\n        Action(:info, info_box),\n    ],\n    pathname = \"eeg.gif\",\n    framerate = 1,\n)\n","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: What Are Actions?","title":"Tutorial 2: What Are Actions?","text":"Author(s): Jacob Zelko, Ole Kröger \nDate: August 11th, 2020 \nTag(s): brain, EEG, project, tutorial, electrodes, Action, BackgroundAction","category":"page"},{"location":"tutorials/tutorial_4/#**Tutorial-4:**-Do-You-Know-Our-Mascot?-Learn-About-Transitions-And-Subactions!","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"You have learned a couple of cool features of Javis already. Now you're ready to finally meet our little mascot. Well actually you can't just see him, we have to create him first. 😄","category":"page"},{"location":"tutorials/tutorial_4/#Our-goal","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Our goal","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Let's create a list of what we want first","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"a circular head\nsome hair\neyes\na nose\na moving mouth\nhe should say something","category":"page"},{"location":"tutorials/tutorial_4/#Learning-Outcomes","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Learning Outcomes","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"This tutorial demonstrates the power of subactions. A SubAction can be used to finely manipulate objects in your animation or visualization. ","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"From this tutorial, you will learn how to:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Finely control objects by making them appear and disappear using a SubAction.\nMove objects using a SubAction.\nLearn Julia splatting syntax (the ...) to create multiple actions quickly.","category":"page"},{"location":"tutorials/tutorial_4/#Starting-with-the-Basics-of-SubAction","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Starting with the Basics of SubAction","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"The ground function should be familiar to you as well as the general structure of the javis function if you have seen the first tutorial. In this tutorial, rather than calling the javis function by itself, we are going to be calling it from the function we are creating to create our mascot, face: ","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"using Javis\n\nfunction ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction title(args...)\n    fontsize(20)\n    text(\"Our Mascot\", Point(0, -200),\n        valign=:middle, halign=:center)\nend\n\nfunction face()\n    video = Video(500, 500)\n    javis(video, [\n        BackgroundAction(1:150, ground),\n        Action(title; subactions=[\n            SubAction(1:5, appear(:fade)),\n        ]),\n    ], pathname=\"jarvis.gif\", framerate=15)\nend","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"A new component introduced in this tutorial is shown in the second Action. It is the kwarg subactions followed by the object SubAction. A SubAction is invoked when you want to apply an additional action or provide an additional functionality to the original Action. Although one could use standard an Action to achieve the same functionality, subactions provide a much easier and more organized method that also improves readability.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"NOTE: For an Action you can leave the frames arg blank.  The frames from the previous action are used. ","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"The subactions keyword uses a list of SubAction structs which are defined in a similar fashion as Action with frames and a function but are in some sense simpler than the Action. ","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"A function of a SubAction is normally either appear or disappear at the moment or one of these transformations: Translation, Rotation and Scaling.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"In theory you can define your own but that is way outside of this tutorial.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Let's summarize the functionality:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"With the invocation of SubAction in the face function, the javis function can be broken down as follows:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"We define our set, the background, for the animation using a BackgroundAction.\nUsing the title function, we invoke an Action and then provide a SubAction.\nThe SubAction utilizes the Javis.jl provided function, appear to cause the title to slowly appear in the first 5 frames of the Action. ","category":"page"},{"location":"tutorials/tutorial_4/#The-Upper-Part-of-the-Head","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"The Upper Part of the Head","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Let's continue with a bit more before we draw part of the mascot.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"The following actions will just be added to the javis function.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Action(16:150, (args...)->circle(O, 100, :stroke); subactions=[\n    SubAction(1:15, appear(:fade)),\n]),","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"This is very similar to the previous action. Here we can see that SubAction uses relative frame numbers such that the head appears in the frames 16:30 and then is at full opacity afterwards.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"NOTE: Just a small refresher: We need the anonymous function (args...)->circle(O, 100, :stroke) as each function gets called with the three arguments video, action, frame.","category":"page"},{"location":"tutorials/tutorial_4/#The-Power-of-Splatting","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"The Power of Splatting","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Okay let's add some hair shall we?","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"I want to have some randomness in his hair so let's define:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"hair_angle = rand(-0.9:0.1:0.9, 20)","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"at the beginning of the face function.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"and have a hair function:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"function hair_blob(angle)\n    sethue(\"brown\")\n    rotate(angle)\n    circle(Point(0, -100), 20, :fill)\nend","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"It draws one brown hair blob given the angle. We basically rotate the whole canvas and then draw the circle always at the same local position. ","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Now how do we draw the hair without creating an action for each blob?","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Well we actually create an Action for each blob but we can use a for loop for this.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"We can use splatting for that :wink:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"[\n    Action(26:150, (args...)->hair_blob(hair_angle[i]); subactions=[\n        SubAction(1:25, appear(:fade)),\n    ]) for i=1:20\n]...,","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"We first create a vector using the [foobar for i=1:20] notation but as the javis function expects foobar, foobar, ..., foobar without the vector we use splatting like [foobar for i=1:20]...","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"I think you get the idea of how to use appear now. Let's add some eyes and a nose quickly before we draw our first gif.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Action(30:150, (args...)->eyes(eye_centers, 10, \"darkblue\"); subactions=[\n    SubAction(1:15, appear(:fade)),\n]),\nAction(45:150, (args...)->poly(nose, :fill); subactions=[\n    SubAction(1:15, appear(:fade)),\n]),","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"with:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"eye_centers = [Point(-40,-30), Point(40,-30)]\nnose = [O, Point(-10,20), Point(10, 20), O]","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"and","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"function eyes(centers, radius, color)\n    sethue(color)\n    circle.(centers, radius, :fill)\n    setcolor(\"white\")\n    circle.(centers, radius/5, :fill)\nend","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"(Image: Up to the nose)","category":"page"},{"location":"tutorials/tutorial_4/#Using-Transformations","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Using Transformations","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Let's give him some moving lips so he can communicate with us:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"upper_lip = [Point(-40, 45), Point(40, 45)]\nlower_lip = [Point(-40, 55), Point(40, 55)]","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"These are just the outer points of the lips:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"function lip(p1, p2)\n    setline(2)\n    move(p1)\n    c1 = p1 + Point(10, 10)\n    c2 = p2 + Point(-10, 10)\n    curve(c1, c2, p2)\n    do_action(:stroke)\nend","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"This function uses some more functions of the awesome Luxor package.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"The lips should be a little thicker than the other lines that we have drawn so far so let's set setline(2). (default is 1). First we move to the starting point of the lip and create two control points a bit below and to the vertical center.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"The curve function is used to draw a cubic Bézier curve.  It unfortunately doesn't support the :stroke at the end so we have to do this with do_action(:stroke) this time.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Now our two actions:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Action(60:150, (args...)->lip(upper_lip...); subactions=[\n    SubAction(1:15, appear(:fade)),\n    [SubAction(20i:20i+10, Translation(0, -5)) for i in 1:5]...,\n    [SubAction(20i+10:20i+20, Translation(0, 5)) for i in 1:5]...\n]),\nAction(60:150, (args...)->lip(lower_lip...); subactions=[\n    SubAction(1:15, appear(:fade)),\n    [SubAction(20i:20i+10, Translation(0, 5)) for i in 1:5]...,\n    [SubAction(20i+10:20i+20, Translation(0, -5)) for i in 1:5]...\n]),","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Yeah I like those ... splatting 😄","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"We fade them in at the beginning and then they shall move up and down a couple of times.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Finally let him speak:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"function speak(str)\n    fontsize(15)\n    text(str, Point(100, 50))\nend","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Action(80:120, (args...)->speak(\"I'm Jarvis\"); subactions=[\n    SubAction(1:5, appear(:fade)),\n    SubAction(36:40, disappear(:fade)),\n]),\nAction(120:150, (args...)->speak(\"How are you?\"); subactions=[\n    SubAction(1:5, appear(:fade)),\n    SubAction(36:40, disappear(:fade)),\n])","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"This time we also use the disappear function to fade out the text.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Now, with everything properly defined using the javis function within the face function one can simply execute the following from your Julia REPL:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"julia> face()","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"To produce the following:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"(Image: Jarvis)","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Jarvis is alive! ","category":"page"},{"location":"tutorials/tutorial_4/#Conclusion","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"To recap, by working through this animation you should now:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Understand how to make objects appear and disappear using subactions\nBe able to move objects inside subactions to have a finer control of the movement\nKnow how to use splatting (the ...) to create actions in a loop","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Hope you had as much fun reading this tutorial as I had creating our mascot.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"You're now ready to create your own big project.","category":"page"},{"location":"tutorials/tutorial_4/#The-Code","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"The Code","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"using Javis\n\nfunction ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction title(args...)\n    fontsize(20)\n    text(\"Our Mascot\", Point(0, -200),\n        valign=:middle, halign=:center)\nend\n\nfunction hair_blob(angle)\n    sethue(\"brown\")\n    rotate(angle)\n    circle(Point(0, -100), 20, :fill)\nend\n\nfunction eyes(centers, radius, color)\n    sethue(color)\n    circle.(centers, radius, :fill)\n    setcolor(\"white\")\n    circle.(centers, radius/5, :fill)\nend\n\nfunction lip(p1, p2)\n    setline(2)\n    move(p1)\n    c1 = p1 + Point(10, 10)\n    c2 = p2 + Point(-10, 10)\n    curve(c1, c2, p2)\n    do_action(:stroke)\nend\n\nfunction speak(str)\n    fontsize(15)\n    text(str, Point(100, 50))\nend\n\nfunction face()\n    eye_centers = [Point(-40,-30), Point(40,-30)]\n    nose = [O, Point(-10,20), Point(10, 20), O]\n    upper_lip = [Point(-40, 45), Point(40, 45)]\n    lower_lip = [Point(-40, 55), Point(40, 55)]\n    hair_angle = rand(-0.9:0.1:0.9, 20)\n\n    video = Video(500, 500)\n    javis(video, [\n        BackgroundAction(1:150, ground),\n        Action(title; subactions=[\n            SubAction(1:5, appear(:fade)),\n        ]),\n        Action(16:150, (args...)->circle(O, 100, :stroke); subactions=[\n            SubAction(1:15, appear(:fade)),\n        ]),\n        [\n            Action(26:150, (args...)->hair_blob(hair_angle[i]); subactions=[\n                SubAction(1:25, appear(:fade)),\n            ]) for i=1:20\n        ]...,\n        Action(30:150, (args...)->eyes(eye_centers, 10, \"darkblue\"); subactions=[\n            SubAction(1:15, appear(:fade)),\n        ]),\n        Action(45:150, (args...)->poly(nose, :fill); subactions=[\n            SubAction(1:15, appear(:fade)),\n        ]),\n        Action(60:150, (args...)->lip(upper_lip...); subactions=[\n            SubAction(1:15, appear(:fade)),\n            [SubAction(20i:20i+10, Translation(0, -5)) for i in 1:5]...,\n            [SubAction(20i+10:20i+20, Translation(0, 5)) for i in 1:5]...\n        ]),\n        Action(60:150, (args...)->lip(lower_lip...); subactions=[\n            SubAction(1:15, appear(:fade)),\n            [SubAction(20i:20i+10, Translation(0, 5)) for i in 1:5]...,\n            [SubAction(20i+10:20i+20, Translation(0, -5)) for i in 1:5]...\n        ]),\n        Action(80:120, (args...)->speak(\"I'm Jarvis\"); subactions=[\n            SubAction(1:5, appear(:fade)),\n            SubAction(36:40, disappear(:fade)),\n        ]),\n        Action(120:150, (args...)->speak(\"How are you?\"); subactions=[\n            SubAction(1:5, appear(:fade)),\n            SubAction(36:40, disappear(:fade)),\n        ])\n    ], pathname=\"jarvis.gif\", framerate=15)\nend","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","title":"Tutorial 4: Do You Know Our Mascot? - Learn About Transitions And Subactions!","text":"Author(s): Ole Kröger, Jacob Zelko \nDate: August 14th, 2020 \nTag(s): jarvis, subactions, fade, transformations","category":"page"},{"location":"mission/#Project-Mission","page":"Mission","title":"Project Mission","text":"","category":"section"},{"location":"mission/#What-is-Javis?","page":"Mission","title":"What is Javis?","text":"","category":"section"},{"location":"mission/","page":"Mission","title":"Mission","text":"Javis.jl is a tool focused on providing an easy to use interface for making animations and developing visualizations quickly - while having fun! 😃","category":"page"},{"location":"mission/","page":"Mission","title":"Mission","text":"That being said, we decided to make this mission statement to clearly explain the scope of this project. That is, to explain what this project is and what it is not. Here are the core tenents of Javis concisely explained:","category":"page"},{"location":"mission/","page":"Mission","title":"Mission","text":"Javis is not a plotting library. Though Javis can do many things, we have no intention of turning this package into a complete plotting library. There may be some elements of plotting we use in this package but it will be limited to accomplish different animation functionality (e.g. animating vectors, etc.). If we do expand the project towards plotting, we will most likely seek interoperability with packages such as Plots.jl or Gadfly.jl.\nJavis focuses on freedom for the user. We approach Javis in the same way an artist approaches an empty canvas. We provide the basic tools but it is up to the user to create most of the functionality they wish to see. Therefore, we won't provide functions that should be handled by other packages or are generally domain specific (e.g. implementing a logistic regression function, generating sparse matrices, etc.). \nJavis seeks to explore and explain. Javis should enable a user in nearly any domain the ability to better explore and explain the phenomena they are analyzing. If there are core visualization elements of a domain that you think should be added, we are open to discussion. Please open an issue and let us know.\nJavis is not neccesarilly geared towards data analytics. Admittedly, there are ways to use Javis to visualize data while creating animations. However, the intent of Javis is not focused on creating functionality to analyze datasets as of this moment. This may change in the future.\nWe love documentation and tutorials! 🤓 One of the things we prioritize in each release of Javis is to document functionalities of the tools we add. Furthermore, we like to make tutorials to also show what is possible in Javis. Do you have a cool animation or blog that you have written using Javis? Let us know by opening an issue!","category":"page"},{"location":"mission/#Summary","page":"Mission","title":"Summary","text":"","category":"section"},{"location":"mission/","page":"Mission","title":"Mission","text":"In summary, Javis.jl focuses on creating an easy to use interface written in Julia to create visualizations and animations. What Javis is, is a tool for exploration that gives great freedom and flexibility to a user. What it is not is a domain specific library for making a limited subset of visualizations or a true data analytics tool.","category":"page"},{"location":"mission/#Acknowledgements","page":"Mission","title":"Acknowledgements","text":"","category":"section"},{"location":"mission/","page":"Mission","title":"Mission","text":"Our project mission was inspired by the mission, philosophy, and interface of projects such as manim, Fedora, Zotero, Spaceship ZSH, and rclone.","category":"page"},{"location":"tutorials/tutorial_3/#**Tutorial-3:**-Rendering-LaTeX-with-Javis!","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"This is a rather brief tutorial about an exciting functionality of Javis.jl: the ability to render LaTeX!","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"If you have never heard of LaTeX before, we highly recommend the following resources:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"What Is LaTeX?\nLearn LaTeX in 30 minutes","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"When you are done with this tutorial, you will have created the following visualization:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_3/#Learning-Outcomes","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Learning Outcomes","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"From this project tutorial you will:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Learn how to render LaTeX using Javis.","category":"page"},{"location":"tutorials/tutorial_3/#Set-Up","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Set Up","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"As demonstrated in prior tutorials, we will use Javis to create a Video object.  However, we also have one more package included this time - LaTeXStrings.jl! ","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"using Javis\nusing LaTeXStrings\n\nvideo = Video(500, 500)","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"LaTeXStrings.jl is a tool that allows for the convenient input and display of LaTeX equations using Julia String objects. It requires a special syntax which looks like this:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"my_latex_string = L\"9\\frac{3}{4}\"","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Which would then render to this LaTeX:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"9frac34","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Let's define our background function to create the backdrop of our frames:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"function ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Since we are making a visualization, we will only generate one frame and set the framerate to 1:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"demo = Video(500, 500)\njavis(demo, [BackgroundAction(1:2, ground)], pathname = \"latex.gif\", framerate = 1)","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Finally, we need to install a node package and additional Julia package for this tutorial. If you are unfamiliar with node, please visit their website for more information to set-up node on your machine.","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"ATTENTION: This next step is critical or else you WILL encounter numerous errors.  If you have not installed node, this tutorial WILL fail for you. ","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"We can accomplish this with the following execution","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"npm install -g mathjax-node-cli","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Currently, Julia does not have the ability (yet) to render LaTeX natively.  Therefore, we must install an additional node package. Sadly. 😭","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Furthermore, we do need to install an additional Julia package called LaTeXStrings. It is a great package that can be installed via the following command:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"julia> ] add LaTeXStrings","category":"page"},{"location":"tutorials/tutorial_3/#The-Writing-on-the-Wall","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"The Writing on the Wall 📝","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Now, let's render some LaTeX! To do so, we will define an additional function that we will call, draw_latex. Here is the code:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"function draw_latex(video, action, frame)\n    fontsize(50)\n    latex(\n        L\"\"\"\\begin{equation}\n        \\left[\\begin{array}{cc} \n        2 & 3 \\\\  4 & \\sqrt{5} \\\\  \n        \\end{array} \\right] \n        \\end{equation}\"\"\",\n        video.width / -2,\n        video.height / -2\n    )\nend","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Here is what this function does:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"The latex function is called to render a LaTeXString object. This particular string makes a matrix! The last two arguments position the latex string  in the top left corner. ","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"NOTE: The default position is the origin (default: the center of the canvas)","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"We can run this code block to render the LaTeX:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"javis(demo, [BackgroundAction(1:2, ground), Action(draw_latex)], pathname = \"latex.gif\")","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Which produces the following visualization:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Math-magical! ✨ You just rendered your first bit of LaTeX using Javis! But, I must say, it looks quite... Bland. 😐","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Let's spice it up!","category":"page"},{"location":"tutorials/tutorial_3/#Throw-it-in-the-Blender!","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Throw it in the Blender!","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"A fun function that Luxor provides is the ability to blend colors together! To do so, let's modify the draw_latex function:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"function draw_latex(video, action, frame)\n    translate(video.width / -2, video.height / -2)\n    black_red = blend(O, Point(0, 150), \"black\", \"red\")\n    setblend(black_red)\n    fontsize(50)\n    latex(\n        L\"\"\"\\begin{equation}\n        \\left[\\begin{array}{cc} \n        2 & 3 \\\\  4 & \\sqrt{5} \\\\  \n        \\end{array} \\right] \n        \\end{equation}\"\"\"\n    )\nend","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"The biggest change is that we added the blend and setblend functions. blend creates a linear blend between two points using two given colors - in this case, black and red. setblend applies the blend to the drawn object.  We also use the translate function this time as it makes writing the blend function easier.","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Can you guess what happens when we execute the code with this newly updated draw_latex function? Here is what the output looks like:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Now that matrix looks, AWESOME. 😎","category":"page"},{"location":"tutorials/tutorial_3/#Conclusion","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Well done! You just finished a brief introduction to using LaTeX in Javis! There is more you can with Javis and LaTeX which will be explored in future tutorials.","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"As a reminder, you just learned how to render LaTeX using Javis! Go forth and produce more wonderful LaTeX creations! ","category":"page"},{"location":"tutorials/tutorial_3/#Full-Code","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Full Code","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"In case you ran into any issues or confusion, here is the full code:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"using Javis\nusing LaTeXStrings\n\nfunction ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction draw_latex(video, action, frame)\n    translate(video.width / -2, video.height / -2)\n    black_red = blend(O, Point(0, 150), \"black\", \"red\")\n    setblend(black_red)\n    fontsize(50)\n    latex(\n        L\"\"\"\\begin{equation}\n        \\left[\\begin{array}{cc} \n        2 & 3 \\\\  4 & \\sqrt{5} \\\\  \n        \\end{array} \\right] \n        \\end{equation}\"\"\"\n    )\nend\n\ndemo = Video(500, 500)\njavis(demo, [BackgroundAction(1:2, ground), Action(draw_latex)], pathname = \"latex.gif\")","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: Rendering LaTeX with Javis!","title":"Tutorial 3: Rendering LaTeX with Javis!","text":"Author(s): Jacob Zelko \nDate: August 16th, 2020 \nTag(s): latex, blend, LaTeXStrings, node","category":"page"},{"location":"tutorials/tutorial_5/#**Tutorial-5:**-Scaling-the-Elements","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"","category":"section"},{"location":"tutorials/tutorial_5/#Introduction","page":"Tutorial 5: Scaling the Elements","title":"Introduction","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"The world is built up of tiny tiny building blocks known as atoms. ⚛️ These atoms come in many different sizes and each has different properties. Let's visualize these atoms and show their uniqueness!","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"P.S. This tutorial is not 100% representative of real life. If you spot the inaccuracy, feel free to open a PR. 😉","category":"page"},{"location":"tutorials/tutorial_5/#Learning-Outcomes","page":"Tutorial 5: Scaling the Elements","title":"Learning Outcomes 📚","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"In this tutorial you'll learn:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"How to apply scaling to an arbitrary shape\nTo use Javis.jl to interact with the following Julia packages:\nUnitful.jl\nPeriodicTable.jl\nWays of creating educational gifs","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"By the end of this tutorial, you will have made the following animation:","category":"page"},{"location":"tutorials/tutorial_5/#PeriodicTable.jl-and-Unitful.jl","page":"Tutorial 5: Scaling the Elements","title":"PeriodicTable.jl and Unitful.jl","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"As normal with our tutorials, we need to import first the packages we will be using. In this tutorial, we are introducing two new packages:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"PeriodicTable.jl - Periodic table render in Julia\nUnitful.jl - Physical quantities with arbitrary units","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"These are straightforward to add to your Julia installation by executing the following in your Julia REPL:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"julia> ] add Unitful, PeriodicTable","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"You might be wondering what these packages do. Let's dive into them then!","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"PeriodicTable.jl enables one to look at information quickly related to the periodic table of elements. One can even print out such a table in their Julia REPL by doing the following:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"julia> using PeriodicTable\n\njulia> elements\n Elements(…119 elements…):\nH                                                  He\nLi Be                               B  C  N  O  F  Ne\nNa Mg                               Al Si P  S  Cl Ar\nK  Ca Sc Ti V  Cr Mn Fe Co Ni Cu Zn Ga Ge As Se Br Kr\nRb Sr Y  Zr Nb Mo Tc Ru Rh Pd Ag Cd In Sn Sb Te I  Xe\nCs Ba    Hf Ta W  Re Os Ir Pt Au Hg Tl Pb Bi Po At Rn\nFr Ra    Rf Db Sg Bh Hs Mt Ds Rg Cn Nh Fl Mc Lv Ts Og\nUue\n      La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm Yb Lu\n      Ac Th Pa U  Np Pu Am Cm Bk Cf Es Fm Md No Lr","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"As the famous Mythbuster, Adam Savage once said, \"IT'S SCIENTIFIC!\" 🧪 🤓 One can even query PeriodicTable to find out information on specific elements. Let's look up Oxygen (O) here!","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"julia> elements[8]\n Oxygen (O), number 8:\n        category: diatomic nonmetal\n     atomic mass: 15.999 u\n         density: 1.429 g/cm³\n   melting point: 54.36 K\n   boiling point: 90.188 K\n           phase: Gas\n          shells: [2, 6]\ne⁻-configuration: 1s² 2s² 2p⁴\n         summary: Oxygen is a chemical element with symbol O and atomic number 8. It is a member of the chalcogen group on the periodic table and is a highly reactive nonmetal and oxidizing agent that readily forms compounds (notably oxides) with most elements. By mass, oxygen is the third-most abundant element in the universe, after hydrogen and helium.\n   discovered by: Carl Wilhelm Scheele\n        named by: Antoine Lavoisier\n          source: https://en.wikipedia.org/wiki/Oxygen\n  spectral image: https://en.wikipedia.org/wiki/File:Oxygen_spectre.jpg","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"As fellow Julian, Johann-Tobias Schäg, said, one should learn Unitful.jl if they want to interact with the real world. Unitful.jl handles physical quantites such as pounds, meters, mols, etc. with minimal overhead in Julia. Further, it helps one to keep track of units and easily convert between different measurement systems.","category":"page"},{"location":"tutorials/tutorial_5/#Setting-Up-Our-Animation","page":"Tutorial 5: Scaling the Elements","title":"Setting Up Our Animation","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"As always, let's import our needed packages:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"using Animations\nusing Javis\nusing PeriodicTable\nusing Unitful","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"NOTE: For this tutorial, we will also use Animations.jl to provide what are called \"easing functions\".","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"These are used to control the speed at which an animation is drawn. This is further explained in Tutorial 6 so for now, don't worry too much about what we are doing with it. ","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"And let's define our background function. This background function will also write the current frame being drawn:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"function ground(video, action, frame)\n    background(\"white\")\n    sethue(\"black\")\n    text(\"$frame / 550\", -240, -230)\nend","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"Finally, let's get started with creating our javis function:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"demo = Video(500, 500)\njavis(\n    demo,\n    [\n        BackgroundAction(1:550, ground),\n\t...\n    ],\n    pathname = \"atomic.gif\",\n    framerate = 10,\n)","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"As you can see, the animation we are creating is going to have many frames! This is the longest animation we have made so far. Why? Not only are we going to examine many different elements, this tutorial also serves to illustrate how one can make longer animations to convey ideas. Think of it as your directoral debut! 🎬 🎥","category":"page"},{"location":"tutorials/tutorial_5/#Taming-the-Elements!","page":"Tutorial 5: Scaling the Elements","title":"Taming the Elements!","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"Each element has a different atomic mass. This atomic mass is measured in the unit called a \"Dalton\" (symbol: u) which is equivalent to 1/12 of the mass of a stationary carbon-12 atom. We can use the Scaling functionality that Javis.jl provides to visualize these different masses!","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"To accomplish this, we need to make a function that shows our currently viewed element:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"function element(;color = \"black\")\n    sethue(color)\n    circle(O, 4, :fill)\nend","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"Essentially, all the element function does is create a circle in the middle of the frame with the initial size of 1.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"From there, we need to define more Action objects for our javis function for the element we are viewing to scale:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"...\n        Action(1:550,\n            (args...) -> element(),\n            subactions = [ \n                SubAction(101:140, Scaling(1, 12)),\n                SubAction(241:280, Scaling(12, 20)),\n                SubAction(381:420, Scaling(20, 7)),\n                SubAction(521:550, Scaling(7, 1))\n            ]\n        ),\n\t...\n        pathname = \"atomic.gif\",\n        framerate = 10\n    )\n...","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"This will grow our element from 1 to 12, from 12 to 20, 20 to 7, and finally 7 to 1.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"IMPORTANT: Scaling does not really scale an object but instead the entire canvas the object is drawn on.  This produces the desired effect for two reasons:The Action is inside a Luxor layer which means that scaling inside this layer does not scale elements outside the layer (e.g. the frame counter in the upper right corner).\nAs it scales the canvas and not the Action, scaling only works nicely if the action is defined at the origin. ","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"If you want to display the element somewhere else, for example, you should not change in the following snippet","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"function element(;color = \"black\")\n   sethue(color)\n   circle(O, 4, :fill)\nendthe point where the circle appears by changing O to the desired Point(x, y). Instead use another SubAction, like  SubAction(1:1, Translation(x, y)), to move the origin of the object to the desired location. Then scaling will work fine as it is defined on the first frame only. ","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"That scaling looks like this:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"Staring at this somewhat makes me think of a black hole... ⚫ But great! The only question now is... What are we looking at? Let's add some more information to this animation! 📝","category":"page"},{"location":"tutorials/tutorial_5/#How-Much-Does-an-Atom-Weigh?","page":"Tutorial 5: Scaling the Elements","title":"How Much Does an Atom Weigh? ⚖️","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"To get the information about an element that we are currently previewing, we need to get information about our element. The first thing we need to get is the atomic mass of the element. So, how do we do that?","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"First, we must modify our javis function slightly to store information about the circle object we draw by using the symbol :atom:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"...\n        Action(1:550,\n            :atom,\n            (args...) -> element(),\n            subactions = [ \n                SubAction(101:140, Scaling(1, 12)),\n                SubAction(241:280, Scaling(12, 20)),\n                SubAction(381:420, Scaling(20, 7)),\n                SubAction(521:550, Scaling(7, 1))\n            ]\n        ),\n\t...","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"Now, we must update the element function to return the current scale of the circle being drawn. The reason why we want the scale of the object is that the scale of the circle represents its atomic mass. At this time, Javis.jl does not allow a user to get the current scale of an object directly. This will most likely be changed in future versions. The following changes need to be made to the element function:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"function element(;color = \"black\")\n    sethue(color)\n    circle(O, 4, :fill)\n    return val(:_current_scale)[1]\nend","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"The val method is shorthand for the get_value method used inside of Javis (which gets the value saved into the :_current_scale symbol by the prior action). Since we are getting the current scale value, we have to access an internal object called :_current_scale. Technically, we should not be accessing this object, but right now, we have no other method. Hopefully this will be fixed in future versions!","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"Now, whenever the Action executes in javis, to draw the circle, the current scale of the circle object is stored into the :atom symbol. Great! But... How do we know what element it is we are looking at?","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"To answer that question, we need to create another function to display this information!","category":"page"},{"location":"tutorials/tutorial_5/#What's-That-Element?","page":"Tutorial 5: Scaling the Elements","title":"What's That Element? 🔍","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"To identify the element and display its information properly, let's create an info box similar to what we made in Tutorial 2! We do this by creating an info_box function that takes in a value:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"function info_box(args...; value = 0)\n    fontsize(12)\n    box(140, -210, 170, 40, :stroke)\n    for element in elements\n        if value == round(ustrip(element.atomic_mass))\n            text(\n                \"Element name: $(element.name)\",\n                140,\n                -220,\n                valign = :middle,\n                halign = :center,\n            )\n            text(\n                \"Atomic Mass: $(round(ustrip(element.atomic_mass)))\",\n                140,\n                -200,\n                valign = :middle,\n                halign = :center,\n            )\n        end\n    end\nend","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"Whenever a mass is measured that corresponds to a known element, the name of that element will now be displayed. Of course, we need to further update our javis function to this:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"...\n        Action(1:550,\n            :atom,\n            (args...) -> element(),\n            subactions = [ \n                SubAction(101:140, Scaling(1, 12)),\n                SubAction(241:280, Scaling(12, 20)),\n                SubAction(381:420, Scaling(20, 7)),\n                SubAction(521:550, Scaling(7, 1))\n            ]\n        ),\n        Action(\n            1:100,\n            (args...) -> info_box(value = val(:atom)),\n            subactions = [SubAction(1:30, sineio(), appear(:draw_text))],\n        ),\n        Action(\n            141:240,\n            (args...) -> info_box(value = val(:atom)),\n            subactions = [SubAction(1:30, sineio(), appear(:draw_text))],\n        ),\n        Action(\n            281:380,\n            (args...) -> info_box(value = val(:atom)),\n            subactions = [SubAction(1:30, sineio(), appear(:draw_text))],\n        ),\n        Action(\n            421:520,\n            (args...) -> info_box(value = val(:atom)),\n            subactions = [SubAction(1:30, sineio(), appear(:draw_text))],\n        ),\n...","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"The current scale of the circle object is now passed to the info_box function via the :atom symbol. Furthermore, we use a SubAction to have the text appear using the method appear(:draw_text) and we control the speed at which is appears using sineio().","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"NOTE: sineio() comes from Animations.jl and is an easing function.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"More on this in Tutorial 6.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"This produces the following animation:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"We can now see what element is being viewed! Hooray! However, it doesn't tell us much about the element - let's change that!","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"All one needs to do is update the info_box function with the following two lines:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"function info_box(args...; value = 0)\n    fontsize(12)\n    box(140, -210, 170, 40, :stroke)\n    # Add the following line to your code\n    box(0, 175, 450, 100, :stroke)     \n    ...\n    text(\n        \"Atomic Mass: $(round(ustrip(element.atomic_mass)))\",\n        140,\n        -200,\n        valign = :middle,\n        halign = :center,\n    )\n    # Add the following line to your code\n    textwrap(\"Description: $(element.summary)\", 400, Point(-200, 125)) \n...","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"Which now produces this fully comprehensive animation that tells us all about the element at hand:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"Hooray! 🎉🎉🎉 We now have a very educational gif that tells us all about the elements we are viewing. We are basically physicists at this point. 😉","category":"page"},{"location":"tutorials/tutorial_5/#Conclusion","page":"Tutorial 5: Scaling the Elements","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"Great work getting through this tutorial! This tutorial was a little more complicated as you learned the following:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"Using Javis.jl to scale objects\nHaving Javis.jl interact with other Julia packages\nCreating extended animations for use in education","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"Our hope with this tutorial is that it inspires you to create more comprehensive and informative animations with Javis.jl Good luck and have fun making more animations!","category":"page"},{"location":"tutorials/tutorial_5/#Full-Code","page":"Tutorial 5: Scaling the Elements","title":"Full Code","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"using Animations\nusing Javis\nusing PeriodicTable\nusing Unitful\n\nfunction ground(video, action, frame)\n    background(\"white\")\n    sethue(\"black\")\n    text(\"$frame / 550\", -240, -230)\nend\n\nfunction element(; color = \"black\")\n    sethue(color)\n    circle(O, 4, :fill)\n    return val(:_current_scale)[1]\nend\n\nfunction info_box(args...; value = 0)\n    fontsize(12)\n    box(140, -210, 170, 40, :stroke)\n    box(0, 175, 450, 100, :stroke)\n    for element in elements\n        if value == round(ustrip(element.atomic_mass))\n            text(\n                \"Element name: $(element.name)\",\n                140,\n                -220,\n                valign = :middle,\n                halign = :center,\n            )\n            text(\n                \"Atomic Radius: $(round(ustrip(element.atomic_mass)))\",\n                140,\n                -200,\n                valign = :middle,\n                halign = :center,\n            )\n            textwrap(\"Description: $(element.summary)\", 400, Point(-200, 125))\n        end\n    end\nend\n\ndemo = Video(500, 500)\njavis(\n    demo,\n    [\n        BackgroundAction(1:550, ground),\n        Action(\n            1:550,\n            :atom,\n            (args...) -> element(),\n            subactions = [\n                SubAction(101:140, Scaling(1, 12)),\n                SubAction(241:280, Scaling(12, 20)),\n                SubAction(381:420, Scaling(20, 7)),\n                SubAction(521:550, Scaling(7, 1)),\n            ],\n        ),\n        Action(\n            1:100,\n            (args...) -> info_box(value = val(:atom)),\n            subactions = [SubAction(1:30, sineio(), appear(:draw_text))],\n        ),\n        Action(\n            141:240,\n            (args...) -> info_box(value = val(:atom)),\n            subactions = [SubAction(1:30, sineio(), appear(:draw_text))],\n        ),\n        Action(\n            281:380,\n            (args...) -> info_box(value = val(:atom)),\n            subactions = [SubAction(1:30, sineio(), appear(:draw_text))],\n        ),\n        Action(\n            421:520,\n            (args...) -> info_box(value = val(:atom)),\n            subactions = [SubAction(1:30, sineio(), appear(:draw_text))],\n        ),\n    ],\n    pathname = \"min_atomic.gif\",\n    framerate = 10,\n)","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Scaling the Elements","title":"Tutorial 5: Scaling the Elements","text":"Author(s): Jacob Zelko \nDate: September 10, 2020 \nTag(s): scaling, atoms, elements, unitful, periodictable","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Aside from tutorials which take you step by step on how to create a tutorial, we also felt that it useful to show additional examples on things you can make with Javis! These animations do not have an accompanying tutorial but rather, scripts that you can examine, tweak, and modify to suit your own purposes. If you have an interesting example that you would like to share with us, open an issue (check out our Contributing Guide on how to do this) and we'd be happy to add your example to this page!","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Example Link Details\n(Image: ) Follow a Path This creates a bezier curve to draw the outline of a car and have a circle go around that outlined path. follow_path, makebezierpath, and appear were used to create this animation.\n(Image: ) Draw the Julia Logo Drawing the Julia logo using Fourier series approximation.  FFTW and OffsetArrays were used to make the signal transforms easier. You must download julia_logo.csv for this example. Kindly provided by ric-cioffi","category":"page"},{"location":"#Welcome-to-the-Javis.jl-Docs!","page":"Home","title":"Welcome to the Javis.jl Docs! 🥳","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"This documentation is designed to provide greater detail into what Javis.jl is, its mission, and how to use it. These are its main components:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Mission and Vision of Javis.jl - this encapsulates our goals and vision for what this project is and what it could be. If you want to contribute to this project, please read this. \nTutorials - these tutorials are designed to help you learn how to use Javis.\nContributing - these are our guidelines for contributing. If you want to contribute to this project, please read this. \nReferences - this is an index of all available functions in the Javis.jl package. A great resource for working with Javis.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For releases, we follow the semantic versioning protocol and enforce the BlueStyle code style format.","category":"page"},{"location":"#Installing-Javis.jl","page":"Home","title":"Installing Javis.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Javis into your Julia installation, type into your Julia REPL the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ] add Javis","category":"page"},{"location":"","page":"Home","title":"Home","text":"That's all there is to it! 😃","category":"page"},{"location":"#Optional-Dependencies","page":"Home","title":"Optional Dependencies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you want LaTeX support, please use node to install the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"npm install -g mathjax-node-cli","category":"page"},{"location":"","page":"Home","title":"Home","text":"As of this moment, we do not have native LaTeX rendering in Julia. We look forward to the day when we can remove this from our documentation!","category":"page"},{"location":"","page":"Home","title":"Home","text":"What is also required is the great package, LaTeXStrings. Add that via your Julia REPL with the following commands:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ] add LaTeXStrings","category":"page"},{"location":"tutorials/tutorial_1/#**Tutorial-1:**-Making-Your-First-Javis-Animation!","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"","category":"section"},{"location":"tutorials/tutorial_1/#Introduction","page":"Tutorial 1: Making Your First Javis Animation!","title":"Introduction","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"If you are reading this tutorial, I am going to assume this is the first time you are using Javis to create an animation.  In that case, welcome to Javis! 😃  By following this tutorial, we are going to make you a director of your very own animations written in pure Julia! 🎬 🎥","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"If you have not installed Javis yet, please visit the homepage to read the installation instructions.","category":"page"},{"location":"tutorials/tutorial_1/#Learning-Outcomes","page":"Tutorial 1: Making Your First Javis Animation!","title":"Learning Outcomes","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"In this tutorial you'll learn:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"What Javis.jl is.\nHow to make a basic animation using Object.\nMove objects created by Javis using Action.\nElements of Luxor.jl.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"By the end of this tutorial, you will have made the following animation:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"With all that said, let's dive into this tutorial! ✨","category":"page"},{"location":"tutorials/tutorial_1/#So...-What-Is-Javis.jl?","page":"Tutorial 1: Making Your First Javis Animation!","title":"So... What Is Javis.jl?","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Javis.jl is an abstraction on top of powerful graphics tools to make animations and visualizations easy to create. It is built on top of the fantastic Julia drawing packages, Luxor.jl and Cairo.jl. Cairo.jl is much too complex to explain here, but Luxor.jl gives one the ability to define and draw on a canvas. Luxor.jl provides simple functions like line, circle and poly by which one can make animations. ","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"NOTE: If you're interested in 2D graphics, you should definitely check out the awesome Luxor.jl package. It has a great tutorial that will give you an even greater understanding of how Javis.jl works.","category":"page"},{"location":"tutorials/tutorial_1/#Prerequisites","page":"Tutorial 1: Making Your First Javis Animation!","title":"Prerequisites","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"In order to use Javis, we will start with the following import:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"using Javis","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Then we need to define a Video ","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"myvideo = Video(500,500) # 500 x 500 // width x height","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Every object and action that we create afterwards is added to myvideo.","category":"page"},{"location":"tutorials/tutorial_1/#Making-Our-Animation","page":"Tutorial 1: Making Your First Javis Animation!","title":"Making Our Animation","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"We need to set-up a few functions that will be able to make our animation! ","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Our first function is the ground function. The ground function sets the background to white and the \"pen\" color to black. ","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"function ground(args...) \n    background(\"white\") # canvas background\n    sethue(\"black\") # pen color\nend","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"NOTE: One may wonder, \"why is args... needed in the ground function?\" Each user-defined function gets three arguments video, object, and frame provided by Javis These arguments are defined below:video: Video struct\nobject: Object struct\nframe: the current frame numberAlthough these arguments are irrelevant for the ground function, we need to write args... such that Julia actually knows that we have a method that accepts those three arguments. The ... basically stands for as many arguments as you want.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Although Luxor.jl provides the functionality to draw circles, Javis does not.  We use Luxor.jl to create a function that defines a color for circles and draws the circles accordingly. Here is how that code looks:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"function object(p=O, color=\"black\")\n    sethue(color)\n    circle(p, 25, :fill)\n    return p\nend","category":"page"},{"location":"tutorials/tutorial_1/#Let's-Draw-a-Circle!","page":"Tutorial 1: Making Your First Javis Animation!","title":"Let's Draw a Circle!","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Using our newly found Javis knowledge, we can now draw a circle and render it! We do the following after importing the Javis.jl package and defining our own functions (don't worry if you don't understand the syntax here - it is too advanced for this tutorial but will be explained in future tutorials):","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"myvideo = Video(500, 500)\nBackgroundObject(1:70, ground)\nred_ball = Object(1:70, (args...) -> object(Point(100,0), \"red\"))\n\nrender(\n    myvideo;\n    pathname=\"circle.gif\"\n)","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"We used BackgroundObject instead of Object to specify that the ground function is applied to all objects afterwards.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"You did it! 🎉 You created your first drawing with Javis! 🔴","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"The render command that you saw in the previous code snippet renders all the objects defined onto the Video object we defined (myvideo) and outputs it as a gif file.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"NOTE: Other formats are supported besides gif.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Check this out by running julia> ?render in your Julia REPL.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Let's go crazy and draw another object:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"myvideo = Video(500, 500)\nBackgroundObject(1:70, ground)\nred_ball = Object(1:70, (args...) -> object(Point(100,0), \"red\"))\nblue_ball = Object(1:70, (args...) -> object(Point(100,80), \"blue\"))\n\nrender(\n    myvideo;\n    pathname=\"circle.gif\"\n)","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"So, this drawing - it's all nice and all, but perhaps a little... Dull?  This is supposed to be an animation! Let's make these balls dance. 💃","category":"page"},{"location":"tutorials/tutorial_1/#It-Takes-Two-to-Tango","page":"Tutorial 1: Making Your First Javis Animation!","title":"It Takes Two to Tango 💃","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Let's use the special modifier, Rotation, to produce a ball that rotates in a circle:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"BackgroundObject(1:70, ground)\nred_ball = Object(1:70, (args...)->object(Point(100,0), \"red\"))\nact!(red_ball, Action(Rotation(0.0, 2π)))","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"The render function stays the same for the rest of this tutorial. Same is true for the myvideo = Video(500, 500) line.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Now that's what I call dancing! However, I think our red ball is a bit lonely, don't you think? It needs a partner!","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"To make another ball appear, execute the following code snippet:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"BackgroundObject(1:70, ground)\nred_ball = Object(1:70, (args...)->object(Point(100,0), \"red\"))\nact!(red_ball, Action(Rotation(0.0, 2π)))\nblue_ball = Object(1:70, (args...)-> object(Point(100,80), \"blue\"))\nact!(blue_ball, Action(Rotation(2π, 0.0, red_ball)))","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"There we go! ","category":"page"},{"location":"tutorials/tutorial_1/#Mapping-an-Orbit","page":"Tutorial 1: Making Your First Javis Animation!","title":"Mapping an Orbit 🚀","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Now, imagine we are astronomers and we model these balls as planets. It would be important to know their orbital trajectories! To do so, let's draw the path that both of the balls take with this new function:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"function path!(points, pos, color)\n    sethue(color)\n    push!(points, pos) # add pos to points\n    circle.(points, 2, :fill) # draws a circle for each point using broadcasting\nend","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"NOTE: The pos takes the position of the :red_ball and passes it as an argument into the path! function. ","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Then, using this function, we can execute the following block:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"BackgroundObject(1:70, ground)\nred_ball = Object(1:70, (args...)->object(Point(100,0), \"red\"))\nact!(red_ball, Action(Rotation(0.0, 2π)))\nObject(1:70, (args...)->path!(path_of_red, pos(red_ball), \"red\"))","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Fantastic! That's a pretty regular orbit I must say!","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Now, to easily visualize our two \"planets\" (the red and blue balls), let's connect them together.  We can do so by drawing a line that connects both balls:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"function connector(p1, p2, color)\n    sethue(color)\n    line(p1,p2, :stroke)\nend","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"And to show this link:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"BackgroundObject(1:70, ground)\nred_ball = Object(1:70, (args...)->object(Point(100,0), \"red\"))\nact!(red_ball, Action(Rotation(0.0, 2π)))\nblue_ball = Object(1:70, (args...)->object(Point(100,80), \"blue\"))\nact!(blue_ball, Action(Rotation(2π, 0.0, red_ball)))\nObject(1:70, (args...)->connector(pos(red_ball), pos(blue_ball), \"black\"))","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Perfect! Now, let's put everything together to see our orbiting planets' trajectories:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"using Javis\n\nfunction ground(args...)\n    background(\"white\") # canvas background\n    sethue(\"black\") # pen color\nend\n\nfunction object(p=O, color=\"black\")\n    sethue(color)\n    circle(p, 25, :fill)\n    return p\nend\n\nfunction path!(points, pos, color)\n    sethue(color)\n    push!(points, pos) # add pos to points\n    circle.(points, 2, :fill) # draws a circle for each point using broadcasting\nend\n\nfunction connector(p1, p2, color)\n    sethue(color)\n    line(p1,p2, :stroke)\nend\n\nmyvideo = Video(500, 500)\n\npath_of_red = Point[]\npath_of_blue = Point[]\n\nBackgroundObject(1:70, ground)\nred_ball = Object(1:70, (args...)->object(Point(100,0), \"red\"))\nact!(red_ball, Action(Rotation(0.0, 2π)))\nblue_ball = Object(1:70, (args...)->object(Point(100,80), \"blue\"))\nact!(blue_ball, Action(Rotation(2π, 0.0, red_ball)))\nObject(1:70, (args...)->connector(pos(red_ball), pos(blue_ball), \"black\"))\nObject(1:70, (args...)->path!(path_of_red, pos(red_ball), \"red\"))\nObject(1:70, (args...)->path!(path_of_blue, pos(blue_ball), \"blue\"))\n\nrender(myvideo; pathname=\"tutorial_1.gif\")","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Do you see any little green men on these planets? 👽 ","category":"page"},{"location":"tutorials/tutorial_1/#Conclusion","page":"Tutorial 1: Making Your First Javis Animation!","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Amazing!!! You have just made your first animation using Javis.jl and we are so proud! I hope you feel like you accomplished something!","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"To recap, by working through this animation you should now:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Know how to make a simple animation in Javis\nUnderstand the difference between Object and BackgroundObject\nBe able to connect actions together using the object variable","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"If you want to know more and experiment with Javis, go onto the following tutorials! We wish you the best on your Javis journey!","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Author(s): @sudomaze, Ole Kröger, Jacob Zelko \nDate: October 16th, 2020 \nTag(s): action, rotation, object","category":"page"}]
}
